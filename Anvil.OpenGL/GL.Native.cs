using System.Runtime.InteropServices;
using System.Security;
using Anvil.Native;

// ReSharper disable IdentifierTypo
// ReSharper disable InconsistentNaming
// ReSharper disable StringLiteralTypo

namespace Anvil.OpenGL;

/// <summary>
/// Interface to a an OpenGL 3.3 Core Profile implementation.
/// <para/>
/// This particular version/profile configuration was selected as the most ideal compromise between utilizing "modern"
/// OpenGL features, while still supporting older hardware and wide platform support. There should never, and will never
/// be a "compatibility" implementation with fixed-pipeline functions as part of this library, it has been deprecated
/// for over a decade.
/// </summary>
/// <remarks>
/// The library is type-safe and CLS-compliant, with both completely managed and unsafe overloads for nearly every
/// applicable function. Native pointer-types are exposed through <see cref="Span{T}"/>, <see cref="Array"/>,
/// <see cref="IntPtr"/>, and unsafe pointers, as well as offer generic overloads when possible and/or it makes sense to
/// do so.
/// <para/>
/// Internally the native invocations use unmanaged function pointers, essentially an analog of a C-style library such
/// as GLAD, which leverages the extra performance benefit of using the IL generated <c>calli</c> instruction by the
/// runtime (view with disassembler). This allows for significantly more performant code than the more common
/// <see cref="DllImportAttribute"/> pattern.
/// </remarks>
[SuppressUnmanagedCodeSecurity]
public static unsafe partial class GL
{
	private static delegate *unmanaged[Cdecl]<TextureUnit,void> glActiveTexture;
	private static delegate *unmanaged[Cdecl]<Program,Shader,void> glAttachShader;
	private static delegate *unmanaged[Cdecl]<int,ConditionalRenderMode,void> glBeginConditionalRender;
	private static delegate *unmanaged[Cdecl]<QueryTarget,Query,void> glBeginQuery;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,void> glBeginTransformFeedback;
	private static delegate *unmanaged[Cdecl]<Program,int,byte*,void> glBindAttribLocation;
	private static delegate *unmanaged[Cdecl]<BufferTarget,Buffer,void> glBindBuffer;
	private static delegate *unmanaged[Cdecl]<BufferTarget,int,Buffer,void> glBindBufferBase;
	private static delegate *unmanaged[Cdecl]<BufferTarget,int,Buffer,nint,nint,void> glBindBufferRange;
	private static delegate *unmanaged[Cdecl]<Program,int,byte*,void> glBindFragDataLocation;
	private static delegate *unmanaged[Cdecl]<Program,int,int,byte*,void> glBindFragDataLocationIndexed;
	private static delegate *unmanaged[Cdecl]<FramebufferTarget,Framebuffer,void> glBindFramebuffer;
	private static delegate *unmanaged[Cdecl]<RenderbufferTarget,Renderbuffer,void> glBindRenderbuffer;
	private static delegate *unmanaged[Cdecl]<int,Sampler,void> glBindSampler;
	private static delegate *unmanaged[Cdecl]<TextureTarget,Texture,void> glBindTexture;
	private static delegate *unmanaged[Cdecl]<VertexArray,void> glBindVertexArray;
	private static delegate *unmanaged[Cdecl]<float,float,float,float,void> glBlendColor;
	private static delegate *unmanaged[Cdecl]<BlendEquationMode,void> glBlendEquation;
	private static delegate *unmanaged[Cdecl]<BlendEquationMode,BlendEquationMode,void> glBlendEquationSeparate;
	private static delegate *unmanaged[Cdecl]<BlendingFactor,BlendingFactor,void> glBlendFunc;
	private static delegate *unmanaged[Cdecl]<BlendingFactor,BlendingFactor,BlendingFactor,BlendingFactor,void> glBlendFuncSeparate;
	private static delegate *unmanaged[Cdecl]<int,int,int,int,int,int,int,int,ClearBufferMask,BlitFramebufferFilter,void> glBlitFramebuffer;
	private static delegate *unmanaged[Cdecl]<BufferTarget,nint,void*,BufferUsage,void> glBufferData;
	private static delegate *unmanaged[Cdecl]<BufferTarget,nint,nint,void*,void> glBufferSubData;
	private static delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferStatus> glCheckFramebufferStatus;
	private static delegate *unmanaged[Cdecl]<ClampColorTarget,ClampColorMode,void> glClampColor;
	private static delegate *unmanaged[Cdecl]<ClearBufferMask,void> glClear;
	private static delegate *unmanaged[Cdecl]<ClearBufferTarget,int,float,int,void> glClearBufferfi;
	private static delegate *unmanaged[Cdecl]<ClearBufferTarget,int,float*,void> glClearBufferfv;
	private static delegate *unmanaged[Cdecl]<ClearBufferTarget,int,int*,void> glClearBufferiv;
	private static delegate *unmanaged[Cdecl]<ClearBufferTarget,int,uint*,void> glClearBufferuiv;
	private static delegate *unmanaged[Cdecl]<float,float,float,float,void> glClearColor;
	private static delegate *unmanaged[Cdecl]<double,void> glClearDepth;
	private static delegate *unmanaged[Cdecl]<int,void> glClearStencil;
	private static delegate *unmanaged[Cdecl]<Sync,SyncObjectMask,ulong,SyncStatus> glClientWaitSync;
	private static delegate *unmanaged[Cdecl]<bool,bool,bool,bool,void> glColorMask;
	private static delegate *unmanaged[Cdecl]<int,bool,bool,bool,bool,void> glColorMaski;
	private static delegate *unmanaged[Cdecl]<ColorPointerType,int,void> glColorP3ui;
	private static delegate *unmanaged[Cdecl]<ColorPointerType,int*,void> glColorP3uiv;
	private static delegate *unmanaged[Cdecl]<ColorPointerType,int,void> glColorP4ui;
	private static delegate *unmanaged[Cdecl]<ColorPointerType,int*,void> glColorP4uiv;
	private static delegate *unmanaged[Cdecl]<Shader,void> glCompileShader;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,void*,void> glCompressedTexImage1D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,void*,void> glCompressedTexImage2D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,int,void*,void> glCompressedTexImage3D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,InternalFormat,int,void*,void> glCompressedTexSubImage1D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,InternalFormat,int,void*,void> glCompressedTexSubImage2D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,int,int,InternalFormat,int,void*,void> glCompressedTexSubImage3D;
	private static delegate *unmanaged[Cdecl]<CopyBufferSubDataTarget,CopyBufferSubDataTarget,nint,nint,nint,void> glCopyBufferSubData;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,void> glCopyTexImage1D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,int,void> glCopyTexImage2D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,void> glCopyTexSubImage1D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,int,int,void> glCopyTexSubImage2D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,int,int,int,void> glCopyTexSubImage3D;
	private static delegate *unmanaged[Cdecl]<Program> glCreateProgram;
	private static delegate *unmanaged[Cdecl]<ShaderType,Shader> glCreateShader;
	private static delegate *unmanaged[Cdecl]<CullFaceMode,void> glCullFace;
	private static delegate *unmanaged[Cdecl]<DebugProc?,IntPtr,void> glDebugMessageCallback;
	private static delegate *unmanaged[Cdecl]<DebugSource,DebugType,DebugSeverity,int,int*,bool,void> glDebugMessageControl;
	private static delegate *unmanaged[Cdecl]<DebugSource,DebugType,int,DebugSeverity,int,byte*,void> glDebugMessageInsert;
	private static delegate *unmanaged[Cdecl]<int,Buffer*,void> glDeleteBuffers;
	private static delegate *unmanaged[Cdecl]<int,Framebuffer*,void> glDeleteFramebuffers;
	private static delegate *unmanaged[Cdecl]<Program,void> glDeleteProgram;
	private static delegate *unmanaged[Cdecl]<int,Query*,void> glDeleteQueries;
	private static delegate *unmanaged[Cdecl]<int,Renderbuffer*,void> glDeleteRenderbuffers;
	private static delegate *unmanaged[Cdecl]<int,Sampler*,void> glDeleteSamplers;
	private static delegate *unmanaged[Cdecl]<Shader,void> glDeleteShader;
	private static delegate *unmanaged[Cdecl]<Sync,void> glDeleteSync;
	private static delegate *unmanaged[Cdecl]<int,Texture*,void> glDeleteTextures;
	private static delegate *unmanaged[Cdecl]<int,VertexArray*,void> glDeleteVertexArrays;
	private static delegate *unmanaged[Cdecl]<DepthFunction,void> glDepthFunc;
	private static delegate *unmanaged[Cdecl]<bool,void> glDepthMask;
	private static delegate *unmanaged[Cdecl]<double,double,void> glDepthRange;
	private static delegate *unmanaged[Cdecl]<Program,Shader,void> glDetachShader;
	private static delegate *unmanaged[Cdecl]<EnableCap,void> glDisable;
	private static delegate *unmanaged[Cdecl]<int,void> glDisableVertexAttribArray;
	private static delegate *unmanaged[Cdecl]<EnableCap,int,void> glDisablei;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int,int,void> glDrawArrays;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int,int,int,void> glDrawArraysInstanced;
	private static delegate *unmanaged[Cdecl]<DrawBufferMode,void> glDrawBuffer;
	private static delegate *unmanaged[Cdecl]<int,DrawBufferMode*,void> glDrawBuffers;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int,DrawElementsType,void*,void> glDrawElements;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int,DrawElementsType,void*,int,void> glDrawElementsBaseVertex;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int,DrawElementsType,void*,int,void> glDrawElementsInstanced;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int,DrawElementsType,void*,int,int,void> glDrawElementsInstancedBaseVertex;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int,int,int,DrawElementsType,void*,void> glDrawRangeElements;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int,int,int,DrawElementsType,void*,int,void> glDrawRangeElementsBaseVertex;
	private static delegate *unmanaged[Cdecl]<EnableCap,void> glEnable;
	private static delegate *unmanaged[Cdecl]<int,void> glEnableVertexAttribArray;
	private static delegate *unmanaged[Cdecl]<EnableCap,int,void> glEnablei;
	private static delegate *unmanaged[Cdecl]<void> glEndConditionalRender;
	private static delegate *unmanaged[Cdecl]<QueryTarget,void> glEndQuery;
	private static delegate *unmanaged[Cdecl]<void> glEndTransformFeedback;
	private static delegate *unmanaged[Cdecl]<SyncCondition,SyncBehaviorFlags,Sync> glFenceSync;
	private static delegate *unmanaged[Cdecl]<void> glFinish;
	private static delegate *unmanaged[Cdecl]<void> glFlush;
	private static delegate *unmanaged[Cdecl]<BufferTarget,nint,nint,void> glFlushMappedBufferRange;
	private static delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,RenderbufferTarget,Renderbuffer,void> glFramebufferRenderbuffer;
	private static delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,Texture,int,void> glFramebufferTexture;
	private static delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,TextureTarget,Texture,int,void> glFramebufferTexture1D;
	private static delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,TextureTarget,Texture,int,void> glFramebufferTexture2D;
	private static delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,TextureTarget,Texture,int,int,void> glFramebufferTexture3D;
	private static delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,Texture,int,int,void> glFramebufferTextureLayer;
	private static delegate *unmanaged[Cdecl]<FrontFaceDirection,void> glFrontFace;
	private static delegate *unmanaged[Cdecl]<int,Buffer*,void> glGenBuffers;
	private static delegate *unmanaged[Cdecl]<int,Framebuffer*,void> glGenFramebuffers;
	private static delegate *unmanaged[Cdecl]<int,Query*,void> glGenQueries;
	private static delegate *unmanaged[Cdecl]<int,Renderbuffer*,void> glGenRenderbuffers;
	private static delegate *unmanaged[Cdecl]<int,Sampler*,void> glGenSamplers;
	private static delegate *unmanaged[Cdecl]<int,Texture*,void> glGenTextures;
	private static delegate *unmanaged[Cdecl]<int,VertexArray*,void> glGenVertexArrays;
	private static delegate *unmanaged[Cdecl]<TextureTarget,void> glGenerateMipmap;
	private static delegate *unmanaged[Cdecl]<Program,int,int,int*,int*,AttributeType*,byte*,void> glGetActiveAttrib;
	private static delegate *unmanaged[Cdecl]<Program,int,int,int*,int*,UniformType*,byte*,void> glGetActiveUniform;
	private static delegate *unmanaged[Cdecl]<Program,int,int,int*,byte*,void> glGetActiveUniformBlockName;
	private static delegate *unmanaged[Cdecl]<Program,int,UniformBlockPName,int*,void> glGetActiveUniformBlockiv;
	private static delegate *unmanaged[Cdecl]<Program,int,int,int*,byte*,void> glGetActiveUniformName;
	private static delegate *unmanaged[Cdecl]<Program,int,int*,UniformPName,int*,void> glGetActiveUniformsiv;
	private static delegate *unmanaged[Cdecl]<Program,int,int*,Shader*,void> glGetAttachedShaders;
	private static delegate *unmanaged[Cdecl]<Program,byte*,int> glGetAttribLocation;
	private static delegate *unmanaged[Cdecl]<BufferTarget,int,bool*,void> glGetBooleani_v;
	private static delegate *unmanaged[Cdecl]<GetPName,bool*,void> glGetBooleanv;
	private static delegate *unmanaged[Cdecl]<BufferTarget,BufferPName,long*,void> glGetBufferParameteri64v;
	private static delegate *unmanaged[Cdecl]<BufferTarget,BufferPName,int*,void> glGetBufferParameteriv;
	private static delegate *unmanaged[Cdecl]<BufferTarget,BufferPointerName,void**,void> glGetBufferPointerv;
	private static delegate *unmanaged[Cdecl]<BufferTarget,nint,nint,void*,void> glGetBufferSubData;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,void*,void> glGetCompressedTexImage;
	private static delegate *unmanaged[Cdecl]<int,int,DebugSource*,DebugType*,int*,DebugSeverity*,int*,byte*,int> glGetDebugMessageLog;
	private static delegate *unmanaged[Cdecl]<GetPName,double*,void> glGetDoublev;
	private static delegate *unmanaged[Cdecl]<ErrorCode> glGetError;
	private static delegate *unmanaged[Cdecl]<GetPName,float*,void> glGetFloatv;
	private static delegate *unmanaged[Cdecl]<Program,byte*,int> glGetFragDataIndex;
	private static delegate *unmanaged[Cdecl]<Program,byte*,int> glGetFragDataLocation;
	private static delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,FramebufferAttachmentParameter,int*,void> glGetFramebufferAttachmentParameteriv;
	private static delegate *unmanaged[Cdecl]<GetPName,int,long*,void> glGetInteger64i_v;
	private static delegate *unmanaged[Cdecl]<GetPName,long*,void> glGetInteger64v;
	private static delegate *unmanaged[Cdecl]<GetPName,int,int*,void> glGetIntegeri_v;
	private static delegate *unmanaged[Cdecl]<GetPName,int*,void> glGetIntegerv;
	private static delegate *unmanaged[Cdecl]<GetMultisamplePName,int,float*,void> glGetMultisamplefv;
	private static delegate *unmanaged[Cdecl]<ObjectIdentifier,int,int,int*,byte*,void> glGetObjectLabel;
	private static delegate *unmanaged[Cdecl]<void*,int,int*,byte*,void> glGetObjectPtrLabel;
	private static delegate *unmanaged[Cdecl]<GetPointervPName,void**,void> glGetPointerv;
	private static delegate *unmanaged[Cdecl]<Program,int,int*,byte*,void> glGetProgramInfoLog;
	private static delegate *unmanaged[Cdecl]<Program,ProgramProperty,int*,void> glGetProgramiv;
	private static delegate *unmanaged[Cdecl]<Query,QueryObjectParameterName,long*,void> glGetQueryObjecti64v;
	private static delegate *unmanaged[Cdecl]<Query,QueryObjectParameterName,int*,void> glGetQueryObjectiv;
	private static delegate *unmanaged[Cdecl]<Query,QueryObjectParameterName,ulong*,void> glGetQueryObjectui64v;
	private static delegate *unmanaged[Cdecl]<Query,QueryObjectParameterName,uint*,void> glGetQueryObjectuiv;
	private static delegate *unmanaged[Cdecl]<QueryTarget,QueryParameterName,int*,void> glGetQueryiv;
	private static delegate *unmanaged[Cdecl]<RenderbufferTarget,RenderbufferParameter,int*,void> glGetRenderbufferParameteriv;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int*,void> glGetSamplerParameterIiv;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,uint*,void> glGetSamplerParameterIuiv;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterF,float*,void> glGetSamplerParameterfv;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int*,void> glGetSamplerParameteriv;
	private static delegate *unmanaged[Cdecl]<Shader,int,int*,byte*,void> glGetShaderInfoLog;
	private static delegate *unmanaged[Cdecl]<Shader,int,int*,byte*,void> glGetShaderSource;
	private static delegate *unmanaged[Cdecl]<Shader,ShaderParameterName,int*,void> glGetShaderiv;
	private static delegate *unmanaged[Cdecl]<StringName,IntPtr> glGetString;
	private static delegate *unmanaged[Cdecl]<StringName,int,IntPtr> glGetStringi;
	private static delegate *unmanaged[Cdecl]<Sync,SyncParameterName,int,int*,int*,void> glGetSynciv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,PixelFormat,PixelType,void*,void> glGetTexImage;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,GetTextureParameter,float*,void> glGetTexLevelParameterfv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,GetTextureParameter,int*,void> glGetTexLevelParameteriv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,GetTextureParameter,int*,void> glGetTexParameterIiv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,GetTextureParameter,uint*,void> glGetTexParameterIuiv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,GetTextureParameter,float*,void> glGetTexParameterfv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,GetTextureParameter,int*,void> glGetTexParameteriv;
	private static delegate *unmanaged[Cdecl]<Program,int,int,int*,int*,AttributeType*,byte*,void> glGetTransformFeedbackVarying;
	private static delegate *unmanaged[Cdecl]<Program,byte*,int> glGetUniformBlockIndex;
	private static delegate *unmanaged[Cdecl]<Program,int,byte**,int*,void> glGetUniformIndices;
	private static delegate *unmanaged[Cdecl]<Program,byte*,int> glGetUniformLocation;
	private static delegate *unmanaged[Cdecl]<Program,int,float*,void> glGetUniformfv;
	private static delegate *unmanaged[Cdecl]<Program,int,int*,void> glGetUniformiv;
	private static delegate *unmanaged[Cdecl]<Program,int,uint*,void> glGetUniformuiv;
	private static delegate *unmanaged[Cdecl]<int,VertexAttrib,int*,void> glGetVertexAttribIiv;
	private static delegate *unmanaged[Cdecl]<int,VertexAttrib,uint*,void> glGetVertexAttribIuiv;
	private static delegate *unmanaged[Cdecl]<int,VertexAttribPointerProperty,void**,void> glGetVertexAttribPointerv;
	private static delegate *unmanaged[Cdecl]<int,VertexAttrib,double*,void> glGetVertexAttribdv;
	private static delegate *unmanaged[Cdecl]<int,VertexAttrib,float*,void> glGetVertexAttribfv;
	private static delegate *unmanaged[Cdecl]<int,VertexAttrib,int*,void> glGetVertexAttribiv;
	private static delegate *unmanaged[Cdecl]<HintTarget,HintMode,void> glHint;
	private static delegate *unmanaged[Cdecl]<Buffer,bool> glIsBuffer;
	private static delegate *unmanaged[Cdecl]<EnableCap,bool> glIsEnabled;
	private static delegate *unmanaged[Cdecl]<EnableCap,int,bool> glIsEnabledi;
	private static delegate *unmanaged[Cdecl]<Framebuffer,bool> glIsFramebuffer;
	private static delegate *unmanaged[Cdecl]<Program,bool> glIsProgram;
	private static delegate *unmanaged[Cdecl]<Query,bool> glIsQuery;
	private static delegate *unmanaged[Cdecl]<Renderbuffer,bool> glIsRenderbuffer;
	private static delegate *unmanaged[Cdecl]<Sampler,bool> glIsSampler;
	private static delegate *unmanaged[Cdecl]<Shader,bool> glIsShader;
	private static delegate *unmanaged[Cdecl]<Sync,bool> glIsSync;
	private static delegate *unmanaged[Cdecl]<Texture,bool> glIsTexture;
	private static delegate *unmanaged[Cdecl]<VertexArray,bool> glIsVertexArray;
	private static delegate *unmanaged[Cdecl]<float,void> glLineWidth;
	private static delegate *unmanaged[Cdecl]<Program,void> glLinkProgram;
	private static delegate *unmanaged[Cdecl]<LogicOp,void> glLogicOp;
	private static delegate *unmanaged[Cdecl]<BufferTarget,BufferAccess,IntPtr> glMapBuffer;
	private static delegate *unmanaged[Cdecl]<BufferTarget,nint,nint,MapBufferAccessMask,IntPtr> glMapBufferRange;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int*,int*,int,void> glMultiDrawArrays;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int*,DrawElementsType,void**,int,void> glMultiDrawElements;
	private static delegate *unmanaged[Cdecl]<PrimitiveType,int*,DrawElementsType,void**,int,int*,void> glMultiDrawElementsBaseVertex;
	private static delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int,void> glMultiTexCoordP1ui;
	private static delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int*,void> glMultiTexCoordP1uiv;
	private static delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int,void> glMultiTexCoordP2ui;
	private static delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int*,void> glMultiTexCoordP2uiv;
	private static delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int,void> glMultiTexCoordP3ui;
	private static delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int*,void> glMultiTexCoordP3uiv;
	private static delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int,void> glMultiTexCoordP4ui;
	private static delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int*,void> glMultiTexCoordP4uiv;
	private static delegate *unmanaged[Cdecl]<NormalPointerType,int,void> glNormalP3ui;
	private static delegate *unmanaged[Cdecl]<NormalPointerType,int*,void> glNormalP3uiv;
	private static delegate *unmanaged[Cdecl]<ObjectIdentifier,int,int,byte*,void> glObjectLabel;
	private static delegate *unmanaged[Cdecl]<void*,int,byte*,void> glObjectPtrLabel;
	private static delegate *unmanaged[Cdecl]<PixelStoreParameter,float,void> glPixelStoref;
	private static delegate *unmanaged[Cdecl]<PixelStoreParameter,int,void> glPixelStorei;
	private static delegate *unmanaged[Cdecl]<PointParameterName,float,void> glPointParameterf;
	private static delegate *unmanaged[Cdecl]<PointParameterName,float*,void> glPointParameterfv;
	private static delegate *unmanaged[Cdecl]<PointParameterName,int,void> glPointParameteri;
	private static delegate *unmanaged[Cdecl]<PointParameterName,int*,void> glPointParameteriv;
	private static delegate *unmanaged[Cdecl]<float,void> glPointSize;
	private static delegate *unmanaged[Cdecl]<MaterialFace,PolygonMode,void> glPolygonMode;
	private static delegate *unmanaged[Cdecl]<float,float,void> glPolygonOffset;
	private static delegate *unmanaged[Cdecl]<void> glPopDebugGroup;
	private static delegate *unmanaged[Cdecl]<int,void> glPrimitiveRestartIndex;
	private static delegate *unmanaged[Cdecl]<VertexProvokingMode,void> glProvokingVertex;
	private static delegate *unmanaged[Cdecl]<DebugSource,int,int,byte*,void> glPushDebugGroup;
	private static delegate *unmanaged[Cdecl]<Query,QueryCounterTarget,void> glQueryCounter;
	private static delegate *unmanaged[Cdecl]<ReadBufferMode,void> glReadBuffer;
	private static delegate *unmanaged[Cdecl]<int,int,int,int,PixelFormat,PixelType,void*,void> glReadPixels;
	private static delegate *unmanaged[Cdecl]<RenderbufferTarget,InternalFormat,int,int,void> glRenderbufferStorage;
	private static delegate *unmanaged[Cdecl]<RenderbufferTarget,int,InternalFormat,int,int,void> glRenderbufferStorageMultisample;
	private static delegate *unmanaged[Cdecl]<float,bool,void> glSampleCoverage;
	private static delegate *unmanaged[Cdecl]<int,int,void> glSampleMaski;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int*,void> glSamplerParameterIiv;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,uint*,void> glSamplerParameterIuiv;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterF,float,void> glSamplerParameterf;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterF,float*,void> glSamplerParameterfv;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int,void> glSamplerParameteri;
	private static delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int*,void> glSamplerParameteriv;
	private static delegate *unmanaged[Cdecl]<int,int,int,int,void> glScissor;
	private static delegate *unmanaged[Cdecl]<ColorPointerType,int,void> glSecondaryColorP3ui;
	private static delegate *unmanaged[Cdecl]<ColorPointerType,int*,void> glSecondaryColorP3uiv;
	private static delegate *unmanaged[Cdecl]<Shader,int,byte**,int*,void> glShaderSource;
	private static delegate *unmanaged[Cdecl]<StencilFunction,int,uint,void> glStencilFunc;
	private static delegate *unmanaged[Cdecl]<StencilFaceDirection,StencilFunction,int,uint,void> glStencilFuncSeparate;
	private static delegate *unmanaged[Cdecl]<uint,void> glStencilMask;
	private static delegate *unmanaged[Cdecl]<StencilFaceDirection,uint,void> glStencilMaskSeparate;
	private static delegate *unmanaged[Cdecl]<StencilOp,StencilOp,StencilOp,void> glStencilOp;
	private static delegate *unmanaged[Cdecl]<StencilFaceDirection,StencilOp,StencilOp,StencilOp,void> glStencilOpSeparate;
	private static delegate *unmanaged[Cdecl]<TextureTarget,SizedInternalFormat,Buffer,void> glTexBuffer;
	private static delegate *unmanaged[Cdecl]<TexCoordPointerType,int,void> glTexCoordP1ui;
	private static delegate *unmanaged[Cdecl]<TexCoordPointerType,int*,void> glTexCoordP1uiv;
	private static delegate *unmanaged[Cdecl]<TexCoordPointerType,int,void> glTexCoordP2ui;
	private static delegate *unmanaged[Cdecl]<TexCoordPointerType,int*,void> glTexCoordP2uiv;
	private static delegate *unmanaged[Cdecl]<TexCoordPointerType,int,void> glTexCoordP3ui;
	private static delegate *unmanaged[Cdecl]<TexCoordPointerType,int*,void> glTexCoordP3uiv;
	private static delegate *unmanaged[Cdecl]<TexCoordPointerType,int,void> glTexCoordP4ui;
	private static delegate *unmanaged[Cdecl]<TexCoordPointerType,int*,void> glTexCoordP4uiv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,PixelFormat,PixelType,void*,void> glTexImage1D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,PixelFormat,PixelType,void*,void> glTexImage2D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,bool,void> glTexImage2DMultisample;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,PixelFormat,PixelType,void*,void> glTexImage3D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,bool,void> glTexImage3DMultisample;
	private static delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,int*,void> glTexParameterIiv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,uint*,void> glTexParameterIuiv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,float,void> glTexParameterf;
	private static delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,float*,void> glTexParameterfv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,int,void> glTexParameteri;
	private static delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,int*,void> glTexParameteriv;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,PixelFormat,PixelType,void*,void> glTexSubImage1D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,PixelFormat,PixelType,void*,void> glTexSubImage2D;
	private static delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,int,int,PixelFormat,PixelType,void*,void> glTexSubImage3D;
	private static delegate *unmanaged[Cdecl]<Program,int,byte**,TransformFeedbackBufferMode,void> glTransformFeedbackVaryings;
	private static delegate *unmanaged[Cdecl]<int,float,void> glUniform1f;
	private static delegate *unmanaged[Cdecl]<int,int,float*,void> glUniform1fv;
	private static delegate *unmanaged[Cdecl]<int,int,void> glUniform1i;
	private static delegate *unmanaged[Cdecl]<int,int,int*,void> glUniform1iv;
	private static delegate *unmanaged[Cdecl]<int,uint,void> glUniform1ui;
	private static delegate *unmanaged[Cdecl]<int,int,uint*,void> glUniform1uiv;
	private static delegate *unmanaged[Cdecl]<int,float,float,void> glUniform2f;
	private static delegate *unmanaged[Cdecl]<int,int,float*,void> glUniform2fv;
	private static delegate *unmanaged[Cdecl]<int,int,int,void> glUniform2i;
	private static delegate *unmanaged[Cdecl]<int,int,int*,void> glUniform2iv;
	private static delegate *unmanaged[Cdecl]<int,uint,uint,void> glUniform2ui;
	private static delegate *unmanaged[Cdecl]<int,int,uint*,void> glUniform2uiv;
	private static delegate *unmanaged[Cdecl]<int,float,float,float,void> glUniform3f;
	private static delegate *unmanaged[Cdecl]<int,int,float*,void> glUniform3fv;
	private static delegate *unmanaged[Cdecl]<int,int,int,int,void> glUniform3i;
	private static delegate *unmanaged[Cdecl]<int,int,int*,void> glUniform3iv;
	private static delegate *unmanaged[Cdecl]<int,uint,uint,uint,void> glUniform3ui;
	private static delegate *unmanaged[Cdecl]<int,int,uint*,void> glUniform3uiv;
	private static delegate *unmanaged[Cdecl]<int,float,float,float,float,void> glUniform4f;
	private static delegate *unmanaged[Cdecl]<int,int,float*,void> glUniform4fv;
	private static delegate *unmanaged[Cdecl]<int,int,int,int,int,void> glUniform4i;
	private static delegate *unmanaged[Cdecl]<int,int,int*,void> glUniform4iv;
	private static delegate *unmanaged[Cdecl]<int,uint,uint,uint,uint,void> glUniform4ui;
	private static delegate *unmanaged[Cdecl]<int,int,uint*,void> glUniform4uiv;
	private static delegate *unmanaged[Cdecl]<Program,int,int,void> glUniformBlockBinding;
	private static delegate *unmanaged[Cdecl]<int,int,bool,float*,void> glUniformMatrix2fv;
	private static delegate *unmanaged[Cdecl]<int,int,bool,float*,void> glUniformMatrix2x3fv;
	private static delegate *unmanaged[Cdecl]<int,int,bool,float*,void> glUniformMatrix2x4fv;
	private static delegate *unmanaged[Cdecl]<int,int,bool,float*,void> glUniformMatrix3fv;
	private static delegate *unmanaged[Cdecl]<int,int,bool,float*,void> glUniformMatrix3x2fv;
	private static delegate *unmanaged[Cdecl]<int,int,bool,float*,void> glUniformMatrix3x4fv;
	private static delegate *unmanaged[Cdecl]<int,int,bool,float*,void> glUniformMatrix4fv;
	private static delegate *unmanaged[Cdecl]<int,int,bool,float*,void> glUniformMatrix4x2fv;
	private static delegate *unmanaged[Cdecl]<int,int,bool,float*,void> glUniformMatrix4x3fv;
	private static delegate *unmanaged[Cdecl]<BufferTarget,bool> glUnmapBuffer;
	private static delegate *unmanaged[Cdecl]<Program,void> glUseProgram;
	private static delegate *unmanaged[Cdecl]<Program,void> glValidateProgram;
	private static delegate *unmanaged[Cdecl]<int,double,void> glVertexAttrib1d;
	private static delegate *unmanaged[Cdecl]<int,double*,void> glVertexAttrib1dv;
	private static delegate *unmanaged[Cdecl]<int,float,void> glVertexAttrib1f;
	private static delegate *unmanaged[Cdecl]<int,float*,void> glVertexAttrib1fv;
	private static delegate *unmanaged[Cdecl]<int,short,void> glVertexAttrib1s;
	private static delegate *unmanaged[Cdecl]<int,short*,void> glVertexAttrib1sv;
	private static delegate *unmanaged[Cdecl]<int,double,double,void> glVertexAttrib2d;
	private static delegate *unmanaged[Cdecl]<int,double*,void> glVertexAttrib2dv;
	private static delegate *unmanaged[Cdecl]<int,float,float,void> glVertexAttrib2f;
	private static delegate *unmanaged[Cdecl]<int,float*,void> glVertexAttrib2fv;
	private static delegate *unmanaged[Cdecl]<int,short,short,void> glVertexAttrib2s;
	private static delegate *unmanaged[Cdecl]<int,short*,void> glVertexAttrib2sv;
	private static delegate *unmanaged[Cdecl]<int,double,double,double,void> glVertexAttrib3d;
	private static delegate *unmanaged[Cdecl]<int,double*,void> glVertexAttrib3dv;
	private static delegate *unmanaged[Cdecl]<int,float,float,float,void> glVertexAttrib3f;
	private static delegate *unmanaged[Cdecl]<int,float*,void> glVertexAttrib3fv;
	private static delegate *unmanaged[Cdecl]<int,short,short,short,void> glVertexAttrib3s;
	private static delegate *unmanaged[Cdecl]<int,short*,void> glVertexAttrib3sv;
	private static delegate *unmanaged[Cdecl]<int,sbyte*,void> glVertexAttrib4Nbv;
	private static delegate *unmanaged[Cdecl]<int,int*,void> glVertexAttrib4Niv;
	private static delegate *unmanaged[Cdecl]<int,short*,void> glVertexAttrib4Nsv;
	private static delegate *unmanaged[Cdecl]<int,byte,byte,byte,byte,void> glVertexAttrib4Nub;
	private static delegate *unmanaged[Cdecl]<int,byte*,void> glVertexAttrib4Nubv;
	private static delegate *unmanaged[Cdecl]<int,uint*,void> glVertexAttrib4Nuiv;
	private static delegate *unmanaged[Cdecl]<int,ushort*,void> glVertexAttrib4Nusv;
	private static delegate *unmanaged[Cdecl]<int,sbyte*,void> glVertexAttrib4bv;
	private static delegate *unmanaged[Cdecl]<int,double,double,double,double,void> glVertexAttrib4d;
	private static delegate *unmanaged[Cdecl]<int,double*,void> glVertexAttrib4dv;
	private static delegate *unmanaged[Cdecl]<int,float,float,float,float,void> glVertexAttrib4f;
	private static delegate *unmanaged[Cdecl]<int,float*,void> glVertexAttrib4fv;
	private static delegate *unmanaged[Cdecl]<int,int*,void> glVertexAttrib4iv;
	private static delegate *unmanaged[Cdecl]<int,short,short,short,short,void> glVertexAttrib4s;
	private static delegate *unmanaged[Cdecl]<int,short*,void> glVertexAttrib4sv;
	private static delegate *unmanaged[Cdecl]<int,byte*,void> glVertexAttrib4ubv;
	private static delegate *unmanaged[Cdecl]<int,uint*,void> glVertexAttrib4uiv;
	private static delegate *unmanaged[Cdecl]<int,ushort*,void> glVertexAttrib4usv;
	private static delegate *unmanaged[Cdecl]<int,int,void> glVertexAttribDivisor;
	private static delegate *unmanaged[Cdecl]<int,int,void> glVertexAttribI1i;
	private static delegate *unmanaged[Cdecl]<int,int*,void> glVertexAttribI1iv;
	private static delegate *unmanaged[Cdecl]<int,uint,void> glVertexAttribI1ui;
	private static delegate *unmanaged[Cdecl]<int,uint*,void> glVertexAttribI1uiv;
	private static delegate *unmanaged[Cdecl]<int,int,int,void> glVertexAttribI2i;
	private static delegate *unmanaged[Cdecl]<int,int*,void> glVertexAttribI2iv;
	private static delegate *unmanaged[Cdecl]<int,uint,uint,void> glVertexAttribI2ui;
	private static delegate *unmanaged[Cdecl]<int,uint*,void> glVertexAttribI2uiv;
	private static delegate *unmanaged[Cdecl]<int,int,int,int,void> glVertexAttribI3i;
	private static delegate *unmanaged[Cdecl]<int,int*,void> glVertexAttribI3iv;
	private static delegate *unmanaged[Cdecl]<int,uint,uint,uint,void> glVertexAttribI3ui;
	private static delegate *unmanaged[Cdecl]<int,uint*,void> glVertexAttribI3uiv;
	private static delegate *unmanaged[Cdecl]<int,sbyte*,void> glVertexAttribI4bv;
	private static delegate *unmanaged[Cdecl]<int,int,int,int,int,void> glVertexAttribI4i;
	private static delegate *unmanaged[Cdecl]<int,int*,void> glVertexAttribI4iv;
	private static delegate *unmanaged[Cdecl]<int,short*,void> glVertexAttribI4sv;
	private static delegate *unmanaged[Cdecl]<int,byte*,void> glVertexAttribI4ubv;
	private static delegate *unmanaged[Cdecl]<int,uint,uint,uint,uint,void> glVertexAttribI4ui;
	private static delegate *unmanaged[Cdecl]<int,uint*,void> glVertexAttribI4uiv;
	private static delegate *unmanaged[Cdecl]<int,ushort*,void> glVertexAttribI4usv;
	private static delegate *unmanaged[Cdecl]<int,int,VertexAttribIType,int,nint,void> glVertexAttribIPointer;
	private static delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int,void> glVertexAttribP1ui;
	private static delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int*,void> glVertexAttribP1uiv;
	private static delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int,void> glVertexAttribP2ui;
	private static delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int*,void> glVertexAttribP2uiv;
	private static delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int,void> glVertexAttribP3ui;
	private static delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int*,void> glVertexAttribP3uiv;
	private static delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int,void> glVertexAttribP4ui;
	private static delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int*,void> glVertexAttribP4uiv;
	private static delegate *unmanaged[Cdecl]<int,int,VertexAttribType,bool,int,nint,void> glVertexAttribPointer;
	private static delegate *unmanaged[Cdecl]<VertexPointerType,int,void> glVertexP2ui;
	private static delegate *unmanaged[Cdecl]<VertexPointerType,int*,void> glVertexP2uiv;
	private static delegate *unmanaged[Cdecl]<VertexPointerType,int,void> glVertexP3ui;
	private static delegate *unmanaged[Cdecl]<VertexPointerType,int*,void> glVertexP3uiv;
	private static delegate *unmanaged[Cdecl]<VertexPointerType,int,void> glVertexP4ui;
	private static delegate *unmanaged[Cdecl]<VertexPointerType,int*,void> glVertexP4uiv;
	private static delegate *unmanaged[Cdecl]<int,int,int,int,void> glViewport;
	private static delegate *unmanaged[Cdecl]<Sync,SyncBehaviorFlags,ulong,void> glWaitSync;
		
	/// <summary>
	/// Loads the OpenGL implementation from a library at the specified path.
	/// </summary>
	/// <param name="libraryPath">The path to a library containing the OpenGL symbols.</param>
	public static void Load(string libraryPath)
	{
		var library = NativeLibrary.Load(libraryPath);
		var proc = new GetProcAddressHandler(name => NativeLibrary.GetExport(library, name));
		Load(proc);
	}
	
	/// <summary>
	/// Loads the OpenGL implementation from the system OpenGL implementation.
	/// </summary>
	/// <exception cref="NotSupportedException">The platform is not Windows, MacOS, Linux, or FreeBSD.</exception>
	/// <exception cref="FileNotFoundException">The library could not be found in the searched paths.</exception>
	/// <remarks>
	/// It is strongly recommended use one of the other overloads or supply your own libraries and/or path to ensure
	/// success. This merely checks locally and the default locations for the major desktop platforms.
	///</remarks>
	public static void Load()
	{
		// This is ugly and bound to break on some systems....
		
		var paths = new List<string>();
		
		if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux) || RuntimeInformation.IsOSPlatform(OSPlatform.FreeBSD))
		{
			paths.Add("libGL.so.1");
			paths.Add("libGL.so");
			paths.Add("/usr/lib/libGL.so.1");
			paths.Add("/usr/lib/libGL.so");
			paths.Add("/lib/libGL.so.1");
			paths.Add("/lib/libGL.so");
		}
		else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
		{
			paths.Add("../Frameworks/OpenGL.framework/OpenGL");
			paths.Add("/Library/Frameworks/OpenGL.framework/OpenGL");
			paths.Add("/System/Library/Frameworks/OpenGL.framework/OpenGL");
			paths.Add("/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL");
		}
		else if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
		{
			paths.Add("opengl32.dll");
			paths.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "opengl32.dll"));
			paths.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.SystemX86), "opengl32.dll"));
		}
		else
		{
			throw new NotSupportedException("Unknown platform.");
		}

		var path = paths.Find(File.Exists);
		if (path is null)
			throw new FileNotFoundException("Cannot automatically locate the path to the OpenGL library.");
		Load(path);
	}
	
	/// <summary>
	/// Gets a flag indicating if the OpenGL implementation has been loaded.
	/// </summary>
	public static bool IsLoaded { get; private set; }
		
	/// <summary>
	/// Loads the OpenGL implementation using the specified <paramref name="handler"/> for finding the symbol addresses.
	/// </summary>
	/// <param name="handler">A handler for returning the address of an exported function in a native library.</param>
	public static void Load(GetProcAddressHandler handler)
	{
		if (IsLoaded)
			return;
		
		glActiveTexture = (delegate *unmanaged[Cdecl]<TextureUnit,void>) handler.Invoke("glActiveTexture");
		glAttachShader = (delegate *unmanaged[Cdecl]<Program,Shader,void>) handler.Invoke("glAttachShader");
		glBeginConditionalRender = (delegate *unmanaged[Cdecl]<int,ConditionalRenderMode,void>) handler.Invoke("glBeginConditionalRender");
		glBeginQuery = (delegate *unmanaged[Cdecl]<QueryTarget,Query,void>) handler.Invoke("glBeginQuery");
		glBeginTransformFeedback = (delegate *unmanaged[Cdecl]<PrimitiveType,void>) handler.Invoke("glBeginTransformFeedback");
		glBindAttribLocation = (delegate *unmanaged[Cdecl]<Program,int,byte*,void>) handler.Invoke("glBindAttribLocation");
		glBindBuffer = (delegate *unmanaged[Cdecl]<BufferTarget,Buffer,void>) handler.Invoke("glBindBuffer");
		glBindBufferBase = (delegate *unmanaged[Cdecl]<BufferTarget,int,Buffer,void>) handler.Invoke("glBindBufferBase");
		glBindBufferRange = (delegate *unmanaged[Cdecl]<BufferTarget,int,Buffer,nint,nint,void>) handler.Invoke("glBindBufferRange");
		glBindFragDataLocation = (delegate *unmanaged[Cdecl]<Program,int,byte*,void>) handler.Invoke("glBindFragDataLocation");
		glBindFragDataLocationIndexed = (delegate *unmanaged[Cdecl]<Program,int,int,byte*,void>) handler.Invoke("glBindFragDataLocationIndexed");
		glBindFramebuffer = (delegate *unmanaged[Cdecl]<FramebufferTarget,Framebuffer,void>) handler.Invoke("glBindFramebuffer");
		glBindRenderbuffer = (delegate *unmanaged[Cdecl]<RenderbufferTarget,Renderbuffer,void>) handler.Invoke("glBindRenderbuffer");
		glBindSampler = (delegate *unmanaged[Cdecl]<int,Sampler,void>) handler.Invoke("glBindSampler");
		glBindTexture = (delegate *unmanaged[Cdecl]<TextureTarget,Texture,void>) handler.Invoke("glBindTexture");
		glBindVertexArray = (delegate *unmanaged[Cdecl]<VertexArray,void>) handler.Invoke("glBindVertexArray");
		glBlendColor = (delegate *unmanaged[Cdecl]<float,float,float,float,void>) handler.Invoke("glBlendColor");
		glBlendEquation = (delegate *unmanaged[Cdecl]<BlendEquationMode,void>) handler.Invoke("glBlendEquation");
		glBlendEquationSeparate = (delegate *unmanaged[Cdecl]<BlendEquationMode,BlendEquationMode,void>) handler.Invoke("glBlendEquationSeparate");
		glBlendFunc = (delegate *unmanaged[Cdecl]<BlendingFactor,BlendingFactor,void>) handler.Invoke("glBlendFunc");
		glBlendFuncSeparate = (delegate *unmanaged[Cdecl]<BlendingFactor,BlendingFactor,BlendingFactor,BlendingFactor,void>) handler.Invoke("glBlendFuncSeparate");
		glBlitFramebuffer = (delegate *unmanaged[Cdecl]<int,int,int,int,int,int,int,int,ClearBufferMask,BlitFramebufferFilter,void>) handler.Invoke("glBlitFramebuffer");
		glBufferData = (delegate *unmanaged[Cdecl]<BufferTarget,nint,void*,BufferUsage,void>) handler.Invoke("glBufferData");
		glBufferSubData = (delegate *unmanaged[Cdecl]<BufferTarget,nint,nint,void*,void>) handler.Invoke("glBufferSubData");
		glCheckFramebufferStatus = (delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferStatus>) handler.Invoke("glCheckFramebufferStatus");
		glClampColor = (delegate *unmanaged[Cdecl]<ClampColorTarget,ClampColorMode,void>) handler.Invoke("glClampColor");
		glClear = (delegate *unmanaged[Cdecl]<ClearBufferMask,void>) handler.Invoke("glClear");
		glClearBufferfi = (delegate *unmanaged[Cdecl]<ClearBufferTarget,int,float,int,void>) handler.Invoke("glClearBufferfi");
		glClearBufferfv = (delegate *unmanaged[Cdecl]<ClearBufferTarget,int,float*,void>) handler.Invoke("glClearBufferfv");
		glClearBufferiv = (delegate *unmanaged[Cdecl]<ClearBufferTarget,int,int*,void>) handler.Invoke("glClearBufferiv");
		glClearBufferuiv = (delegate *unmanaged[Cdecl]<ClearBufferTarget,int,uint*,void>) handler.Invoke("glClearBufferuiv");
		glClearColor = (delegate *unmanaged[Cdecl]<float,float,float,float,void>) handler.Invoke("glClearColor");
		glClearDepth = (delegate *unmanaged[Cdecl]<double,void>) handler.Invoke("glClearDepth");
		glClearStencil = (delegate *unmanaged[Cdecl]<int,void>) handler.Invoke("glClearStencil");
		glClientWaitSync = (delegate *unmanaged[Cdecl]<Sync,SyncObjectMask,ulong,SyncStatus>) handler.Invoke("glClientWaitSync");
		glColorMask = (delegate *unmanaged[Cdecl]<bool,bool,bool,bool,void>) handler.Invoke("glColorMask");
		glColorMaski = (delegate *unmanaged[Cdecl]<int,bool,bool,bool,bool,void>) handler.Invoke("glColorMaski");
		glColorP3ui = (delegate *unmanaged[Cdecl]<ColorPointerType,int,void>) handler.Invoke("glColorP3ui");
		glColorP3uiv = (delegate *unmanaged[Cdecl]<ColorPointerType,int*,void>) handler.Invoke("glColorP3uiv");
		glColorP4ui = (delegate *unmanaged[Cdecl]<ColorPointerType,int,void>) handler.Invoke("glColorP4ui");
		glColorP4uiv = (delegate *unmanaged[Cdecl]<ColorPointerType,int*,void>) handler.Invoke("glColorP4uiv");
		glCompileShader = (delegate *unmanaged[Cdecl]<Shader,void>) handler.Invoke("glCompileShader");
		glCompressedTexImage1D = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,void*,void>) handler.Invoke("glCompressedTexImage1D");
		glCompressedTexImage2D = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,void*,void>) handler.Invoke("glCompressedTexImage2D");
		glCompressedTexImage3D = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,int,void*,void>) handler.Invoke("glCompressedTexImage3D");
		glCompressedTexSubImage1D = (delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,InternalFormat,int,void*,void>) handler.Invoke("glCompressedTexSubImage1D");
		glCompressedTexSubImage2D = (delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,InternalFormat,int,void*,void>) handler.Invoke("glCompressedTexSubImage2D");
		glCompressedTexSubImage3D = (delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,int,int,InternalFormat,int,void*,void>) handler.Invoke("glCompressedTexSubImage3D");
		glCopyBufferSubData = (delegate *unmanaged[Cdecl]<CopyBufferSubDataTarget,CopyBufferSubDataTarget,nint,nint,nint,void>) handler.Invoke("glCopyBufferSubData");
		glCopyTexImage1D = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,void>) handler.Invoke("glCopyTexImage1D");
		glCopyTexImage2D = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,int,void>) handler.Invoke("glCopyTexImage2D");
		glCopyTexSubImage1D = (delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,void>) handler.Invoke("glCopyTexSubImage1D");
		glCopyTexSubImage2D = (delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,int,int,void>) handler.Invoke("glCopyTexSubImage2D");
		glCopyTexSubImage3D = (delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,int,int,int,void>) handler.Invoke("glCopyTexSubImage3D");
		glCreateProgram = (delegate *unmanaged[Cdecl]<Program>) handler.Invoke("glCreateProgram");
		glCreateShader = (delegate *unmanaged[Cdecl]<ShaderType,Shader>) handler.Invoke("glCreateShader");
		glCullFace = (delegate *unmanaged[Cdecl]<CullFaceMode,void>) handler.Invoke("glCullFace");
		glDebugMessageCallback = (delegate *unmanaged[Cdecl]<DebugProc?,IntPtr,void>) handler.Invoke("glDebugMessageCallback");
		glDebugMessageControl = (delegate *unmanaged[Cdecl]<DebugSource,DebugType,DebugSeverity,int,int*,bool,void>) handler.Invoke("glDebugMessageControl");
		glDebugMessageInsert = (delegate *unmanaged[Cdecl]<DebugSource,DebugType,int,DebugSeverity,int,byte*,void>) handler.Invoke("glDebugMessageInsert");
		glDeleteBuffers = (delegate *unmanaged[Cdecl]<int,Buffer*,void>) handler.Invoke("glDeleteBuffers");
		glDeleteFramebuffers = (delegate *unmanaged[Cdecl]<int,Framebuffer*,void>) handler.Invoke("glDeleteFramebuffers");
		glDeleteProgram = (delegate *unmanaged[Cdecl]<Program,void>) handler.Invoke("glDeleteProgram");
		glDeleteQueries = (delegate *unmanaged[Cdecl]<int,Query*,void>) handler.Invoke("glDeleteQueries");
		glDeleteRenderbuffers = (delegate *unmanaged[Cdecl]<int,Renderbuffer*,void>) handler.Invoke("glDeleteRenderbuffers");
		glDeleteSamplers = (delegate *unmanaged[Cdecl]<int,Sampler*,void>) handler.Invoke("glDeleteSamplers");
		glDeleteShader = (delegate *unmanaged[Cdecl]<Shader,void>) handler.Invoke("glDeleteShader");
		glDeleteSync = (delegate *unmanaged[Cdecl]<Sync,void>) handler.Invoke("glDeleteSync");
		glDeleteTextures = (delegate *unmanaged[Cdecl]<int,Texture*,void>) handler.Invoke("glDeleteTextures");
		glDeleteVertexArrays = (delegate *unmanaged[Cdecl]<int,VertexArray*,void>) handler.Invoke("glDeleteVertexArrays");
		glDepthFunc = (delegate *unmanaged[Cdecl]<DepthFunction,void>) handler.Invoke("glDepthFunc");
		glDepthMask = (delegate *unmanaged[Cdecl]<bool,void>) handler.Invoke("glDepthMask");
		glDepthRange = (delegate *unmanaged[Cdecl]<double,double,void>) handler.Invoke("glDepthRange");
		glDetachShader = (delegate *unmanaged[Cdecl]<Program,Shader,void>) handler.Invoke("glDetachShader");
		glDisable = (delegate *unmanaged[Cdecl]<EnableCap,void>) handler.Invoke("glDisable");
		glDisableVertexAttribArray = (delegate *unmanaged[Cdecl]<int,void>) handler.Invoke("glDisableVertexAttribArray");
		glDisablei = (delegate *unmanaged[Cdecl]<EnableCap,int,void>) handler.Invoke("glDisablei");
		glDrawArrays = (delegate *unmanaged[Cdecl]<PrimitiveType,int,int,void>) handler.Invoke("glDrawArrays");
		glDrawArraysInstanced = (delegate *unmanaged[Cdecl]<PrimitiveType,int,int,int,void>) handler.Invoke("glDrawArraysInstanced");
		glDrawBuffer = (delegate *unmanaged[Cdecl]<DrawBufferMode,void>) handler.Invoke("glDrawBuffer");
		glDrawBuffers = (delegate *unmanaged[Cdecl]<int,DrawBufferMode*,void>) handler.Invoke("glDrawBuffers");
		glDrawElements = (delegate *unmanaged[Cdecl]<PrimitiveType,int,DrawElementsType,void*,void>) handler.Invoke("glDrawElements");
		glDrawElementsBaseVertex = (delegate *unmanaged[Cdecl]<PrimitiveType,int,DrawElementsType,void*,int,void>) handler.Invoke("glDrawElementsBaseVertex");
		glDrawElementsInstanced = (delegate *unmanaged[Cdecl]<PrimitiveType,int,DrawElementsType,void*,int,void>) handler.Invoke("glDrawElementsInstanced");
		glDrawElementsInstancedBaseVertex = (delegate *unmanaged[Cdecl]<PrimitiveType,int,DrawElementsType,void*,int,int,void>) handler.Invoke("glDrawElementsInstancedBaseVertex");
		glDrawRangeElements = (delegate *unmanaged[Cdecl]<PrimitiveType,int,int,int,DrawElementsType,void*,void>) handler.Invoke("glDrawRangeElements");
		glDrawRangeElementsBaseVertex = (delegate *unmanaged[Cdecl]<PrimitiveType,int,int,int,DrawElementsType,void*,int,void>) handler.Invoke("glDrawRangeElementsBaseVertex");
		glEnable = (delegate *unmanaged[Cdecl]<EnableCap,void>) handler.Invoke("glEnable");
		glEnableVertexAttribArray = (delegate *unmanaged[Cdecl]<int,void>) handler.Invoke("glEnableVertexAttribArray");
		glEnablei = (delegate *unmanaged[Cdecl]<EnableCap,int,void>) handler.Invoke("glEnablei");
		glEndConditionalRender = (delegate *unmanaged[Cdecl]<void>) handler.Invoke("glEndConditionalRender");
		glEndQuery = (delegate *unmanaged[Cdecl]<QueryTarget,void>) handler.Invoke("glEndQuery");
		glEndTransformFeedback = (delegate *unmanaged[Cdecl]<void>) handler.Invoke("glEndTransformFeedback");
		glFenceSync = (delegate *unmanaged[Cdecl]<SyncCondition,SyncBehaviorFlags,Sync>) handler.Invoke("glFenceSync");
		glFinish = (delegate *unmanaged[Cdecl]<void>) handler.Invoke("glFinish");
		glFlush = (delegate *unmanaged[Cdecl]<void>) handler.Invoke("glFlush");
		glFlushMappedBufferRange = (delegate *unmanaged[Cdecl]<BufferTarget,nint,nint,void>) handler.Invoke("glFlushMappedBufferRange");
		glFramebufferRenderbuffer = (delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,RenderbufferTarget,Renderbuffer,void>) handler.Invoke("glFramebufferRenderbuffer");
		glFramebufferTexture = (delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,Texture,int,void>) handler.Invoke("glFramebufferTexture");
		glFramebufferTexture1D = (delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,TextureTarget,Texture,int,void>) handler.Invoke("glFramebufferTexture1D");
		glFramebufferTexture2D = (delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,TextureTarget,Texture,int,void>) handler.Invoke("glFramebufferTexture2D");
		glFramebufferTexture3D = (delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,TextureTarget,Texture,int,int,void>) handler.Invoke("glFramebufferTexture3D");
		glFramebufferTextureLayer = (delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,Texture,int,int,void>) handler.Invoke("glFramebufferTextureLayer");
		glFrontFace = (delegate *unmanaged[Cdecl]<FrontFaceDirection,void>) handler.Invoke("glFrontFace");
		glGenBuffers = (delegate *unmanaged[Cdecl]<int,Buffer*,void>) handler.Invoke("glGenBuffers");
		glGenFramebuffers = (delegate *unmanaged[Cdecl]<int,Framebuffer*,void>) handler.Invoke("glGenFramebuffers");
		glGenQueries = (delegate *unmanaged[Cdecl]<int,Query*,void>) handler.Invoke("glGenQueries");
		glGenRenderbuffers = (delegate *unmanaged[Cdecl]<int,Renderbuffer*,void>) handler.Invoke("glGenRenderbuffers");
		glGenSamplers = (delegate *unmanaged[Cdecl]<int,Sampler*,void>) handler.Invoke("glGenSamplers");
		glGenTextures = (delegate *unmanaged[Cdecl]<int,Texture*,void>) handler.Invoke("glGenTextures");
		glGenVertexArrays = (delegate *unmanaged[Cdecl]<int,VertexArray*,void>) handler.Invoke("glGenVertexArrays");
		glGenerateMipmap = (delegate *unmanaged[Cdecl]<TextureTarget,void>) handler.Invoke("glGenerateMipmap");
		glGetActiveAttrib = (delegate *unmanaged[Cdecl]<Program,int,int,int*,int*,AttributeType*,byte*,void>) handler.Invoke("glGetActiveAttrib");
		glGetActiveUniform = (delegate *unmanaged[Cdecl]<Program,int,int,int*,int*,UniformType*,byte*,void>) handler.Invoke("glGetActiveUniform");
		glGetActiveUniformBlockName = (delegate *unmanaged[Cdecl]<Program,int,int,int*,byte*,void>) handler.Invoke("glGetActiveUniformBlockName");
		glGetActiveUniformBlockiv = (delegate *unmanaged[Cdecl]<Program,int,UniformBlockPName,int*,void>) handler.Invoke("glGetActiveUniformBlockiv");
		glGetActiveUniformName = (delegate *unmanaged[Cdecl]<Program,int,int,int*,byte*,void>) handler.Invoke("glGetActiveUniformName");
		glGetActiveUniformsiv = (delegate *unmanaged[Cdecl]<Program,int,int*,UniformPName,int*,void>) handler.Invoke("glGetActiveUniformsiv");
		glGetAttachedShaders = (delegate *unmanaged[Cdecl]<Program,int,int*,Shader*,void>) handler.Invoke("glGetAttachedShaders");
		glGetAttribLocation = (delegate *unmanaged[Cdecl]<Program,byte*,int>) handler.Invoke("glGetAttribLocation");
		glGetBooleani_v = (delegate *unmanaged[Cdecl]<BufferTarget,int,bool*,void>) handler.Invoke("glGetBooleani_v");
		glGetBooleanv = (delegate *unmanaged[Cdecl]<GetPName,bool*,void>) handler.Invoke("glGetBooleanv");
		glGetBufferParameteri64v = (delegate *unmanaged[Cdecl]<BufferTarget,BufferPName,long*,void>) handler.Invoke("glGetBufferParameteri64v");
		glGetBufferParameteriv = (delegate *unmanaged[Cdecl]<BufferTarget,BufferPName,int*,void>) handler.Invoke("glGetBufferParameteriv");
		glGetBufferPointerv = (delegate *unmanaged[Cdecl]<BufferTarget,BufferPointerName,void**,void>) handler.Invoke("glGetBufferPointerv");
		glGetBufferSubData = (delegate *unmanaged[Cdecl]<BufferTarget,nint,nint,void*,void>) handler.Invoke("glGetBufferSubData");
		glGetCompressedTexImage = (delegate *unmanaged[Cdecl]<TextureTarget,int,void*,void>) handler.Invoke("glGetCompressedTexImage");
		glGetDebugMessageLog = (delegate *unmanaged[Cdecl]<int,int,DebugSource*,DebugType*,int*,DebugSeverity*,int*,byte*,int>) handler.Invoke("glGetDebugMessageLog");
		glGetDoublev = (delegate *unmanaged[Cdecl]<GetPName,double*,void>) handler.Invoke("glGetDoublev");
		glGetError = (delegate *unmanaged[Cdecl]<ErrorCode>) handler.Invoke("glGetError");
		glGetFloatv = (delegate *unmanaged[Cdecl]<GetPName,float*,void>) handler.Invoke("glGetFloatv");
		glGetFragDataIndex = (delegate *unmanaged[Cdecl]<Program,byte*,int>) handler.Invoke("glGetFragDataIndex");
		glGetFragDataLocation = (delegate *unmanaged[Cdecl]<Program,byte*,int>) handler.Invoke("glGetFragDataLocation");
		glGetFramebufferAttachmentParameteriv = (delegate *unmanaged[Cdecl]<FramebufferTarget,FramebufferAttachment,FramebufferAttachmentParameter,int*,void>) handler.Invoke("glGetFramebufferAttachmentParameteriv");
		glGetInteger64i_v = (delegate *unmanaged[Cdecl]<GetPName,int,long*,void>) handler.Invoke("glGetInteger64i_v");
		glGetInteger64v = (delegate *unmanaged[Cdecl]<GetPName,long*,void>) handler.Invoke("glGetInteger64v");
		glGetIntegeri_v = (delegate *unmanaged[Cdecl]<GetPName,int,int*,void>) handler.Invoke("glGetIntegeri_v");
		glGetIntegerv = (delegate *unmanaged[Cdecl]<GetPName,int*,void>) handler.Invoke("glGetIntegerv");
		glGetMultisamplefv = (delegate *unmanaged[Cdecl]<GetMultisamplePName,int,float*,void>) handler.Invoke("glGetMultisamplefv");
		glGetObjectLabel = (delegate *unmanaged[Cdecl]<ObjectIdentifier,int,int,int*,byte*,void>) handler.Invoke("glGetObjectLabel");
		glGetObjectPtrLabel = (delegate *unmanaged[Cdecl]<void*,int,int*,byte*,void>) handler.Invoke("glGetObjectPtrLabel");
		glGetPointerv = (delegate *unmanaged[Cdecl]<GetPointervPName,void**,void>) handler.Invoke("glGetPointerv");
		glGetProgramInfoLog = (delegate *unmanaged[Cdecl]<Program,int,int*,byte*,void>) handler.Invoke("glGetProgramInfoLog");
		glGetProgramiv = (delegate *unmanaged[Cdecl]<Program,ProgramProperty,int*,void>) handler.Invoke("glGetProgramiv");
		glGetQueryObjecti64v = (delegate *unmanaged[Cdecl]<Query,QueryObjectParameterName,long*,void>) handler.Invoke("glGetQueryObjecti64v");
		glGetQueryObjectiv = (delegate *unmanaged[Cdecl]<Query,QueryObjectParameterName,int*,void>) handler.Invoke("glGetQueryObjectiv");
		glGetQueryObjectui64v = (delegate *unmanaged[Cdecl]<Query,QueryObjectParameterName,ulong*,void>) handler.Invoke("glGetQueryObjectui64v");
		glGetQueryObjectuiv = (delegate *unmanaged[Cdecl]<Query,QueryObjectParameterName,uint*,void>) handler.Invoke("glGetQueryObjectuiv");
		glGetQueryiv = (delegate *unmanaged[Cdecl]<QueryTarget,QueryParameterName,int*,void>) handler.Invoke("glGetQueryiv");
		glGetRenderbufferParameteriv = (delegate *unmanaged[Cdecl]<RenderbufferTarget,RenderbufferParameter,int*,void>) handler.Invoke("glGetRenderbufferParameteriv");
		glGetSamplerParameterIiv = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int*,void>) handler.Invoke("glGetSamplerParameterIiv");
		glGetSamplerParameterIuiv = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,uint*,void>) handler.Invoke("glGetSamplerParameterIuiv");
		glGetSamplerParameterfv = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterF,float*,void>) handler.Invoke("glGetSamplerParameterfv");
		glGetSamplerParameteriv = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int*,void>) handler.Invoke("glGetSamplerParameteriv");
		glGetShaderInfoLog = (delegate *unmanaged[Cdecl]<Shader,int,int*,byte*,void>) handler.Invoke("glGetShaderInfoLog");
		glGetShaderSource = (delegate *unmanaged[Cdecl]<Shader,int,int*,byte*,void>) handler.Invoke("glGetShaderSource");
		glGetShaderiv = (delegate *unmanaged[Cdecl]<Shader,ShaderParameterName,int*,void>) handler.Invoke("glGetShaderiv");
		glGetString = (delegate *unmanaged[Cdecl]<StringName,IntPtr>) handler.Invoke("glGetString");
		glGetStringi = (delegate *unmanaged[Cdecl]<StringName,int,IntPtr>) handler.Invoke("glGetStringi");
		glGetSynciv = (delegate *unmanaged[Cdecl]<Sync,SyncParameterName,int,int*,int*,void>) handler.Invoke("glGetSynciv");
		glGetTexImage = (delegate *unmanaged[Cdecl]<TextureTarget,int,PixelFormat,PixelType,void*,void>) handler.Invoke("glGetTexImage");
		glGetTexLevelParameterfv = (delegate *unmanaged[Cdecl]<TextureTarget,int,GetTextureParameter,float*,void>) handler.Invoke("glGetTexLevelParameterfv");
		glGetTexLevelParameteriv = (delegate *unmanaged[Cdecl]<TextureTarget,int,GetTextureParameter,int*,void>) handler.Invoke("glGetTexLevelParameteriv");
		glGetTexParameterIiv = (delegate *unmanaged[Cdecl]<TextureTarget,GetTextureParameter,int*,void>) handler.Invoke("glGetTexParameterIiv");
		glGetTexParameterIuiv = (delegate *unmanaged[Cdecl]<TextureTarget,GetTextureParameter,uint*,void>) handler.Invoke("glGetTexParameterIuiv");
		glGetTexParameterfv = (delegate *unmanaged[Cdecl]<TextureTarget,GetTextureParameter,float*,void>) handler.Invoke("glGetTexParameterfv");
		glGetTexParameteriv = (delegate *unmanaged[Cdecl]<TextureTarget,GetTextureParameter,int*,void>) handler.Invoke("glGetTexParameteriv");
		glGetTransformFeedbackVarying = (delegate *unmanaged[Cdecl]<Program,int,int,int*,int*,AttributeType*,byte*,void>) handler.Invoke("glGetTransformFeedbackVarying");
		glGetUniformBlockIndex = (delegate *unmanaged[Cdecl]<Program,byte*,int>) handler.Invoke("glGetUniformBlockIndex");
		glGetUniformIndices = (delegate *unmanaged[Cdecl]<Program,int,byte**,int*,void>) handler.Invoke("glGetUniformIndices");
		glGetUniformLocation = (delegate *unmanaged[Cdecl]<Program,byte*,int>) handler.Invoke("glGetUniformLocation");
		glGetUniformfv = (delegate *unmanaged[Cdecl]<Program,int,float*,void>) handler.Invoke("glGetUniformfv");
		glGetUniformiv = (delegate *unmanaged[Cdecl]<Program,int,int*,void>) handler.Invoke("glGetUniformiv");
		glGetUniformuiv = (delegate *unmanaged[Cdecl]<Program,int,uint*,void>) handler.Invoke("glGetUniformuiv");
		glGetVertexAttribIiv = (delegate *unmanaged[Cdecl]<int,VertexAttrib,int*,void>) handler.Invoke("glGetVertexAttribIiv");
		glGetVertexAttribIuiv = (delegate *unmanaged[Cdecl]<int,VertexAttrib,uint*,void>) handler.Invoke("glGetVertexAttribIuiv");
		glGetVertexAttribPointerv = (delegate *unmanaged[Cdecl]<int,VertexAttribPointerProperty,void**,void>) handler.Invoke("glGetVertexAttribPointerv");
		glGetVertexAttribdv = (delegate *unmanaged[Cdecl]<int,VertexAttrib,double*,void>) handler.Invoke("glGetVertexAttribdv");
		glGetVertexAttribfv = (delegate *unmanaged[Cdecl]<int,VertexAttrib,float*,void>) handler.Invoke("glGetVertexAttribfv");
		glGetVertexAttribiv = (delegate *unmanaged[Cdecl]<int,VertexAttrib,int*,void>) handler.Invoke("glGetVertexAttribiv");
		glHint = (delegate *unmanaged[Cdecl]<HintTarget,HintMode,void>) handler.Invoke("glHint");
		glIsBuffer = (delegate *unmanaged[Cdecl]<Buffer,bool>) handler.Invoke("glIsBuffer");
		glIsEnabled = (delegate *unmanaged[Cdecl]<EnableCap,bool>) handler.Invoke("glIsEnabled");
		glIsEnabledi = (delegate *unmanaged[Cdecl]<EnableCap,int,bool>) handler.Invoke("glIsEnabledi");
		glIsFramebuffer = (delegate *unmanaged[Cdecl]<Framebuffer,bool>) handler.Invoke("glIsFramebuffer");
		glIsProgram = (delegate *unmanaged[Cdecl]<Program,bool>) handler.Invoke("glIsProgram");
		glIsQuery = (delegate *unmanaged[Cdecl]<Query,bool>) handler.Invoke("glIsQuery");
		glIsRenderbuffer = (delegate *unmanaged[Cdecl]<Renderbuffer,bool>) handler.Invoke("glIsRenderbuffer");
		glIsSampler = (delegate *unmanaged[Cdecl]<Sampler,bool>) handler.Invoke("glIsSampler");
		glIsShader = (delegate *unmanaged[Cdecl]<Shader,bool>) handler.Invoke("glIsShader");
		glIsSync = (delegate *unmanaged[Cdecl]<Sync,bool>) handler.Invoke("glIsSync");
		glIsTexture = (delegate *unmanaged[Cdecl]<Texture,bool>) handler.Invoke("glIsTexture");
		glIsVertexArray = (delegate *unmanaged[Cdecl]<VertexArray,bool>) handler.Invoke("glIsVertexArray");
		glLineWidth = (delegate *unmanaged[Cdecl]<float,void>) handler.Invoke("glLineWidth");
		glLinkProgram = (delegate *unmanaged[Cdecl]<Program,void>) handler.Invoke("glLinkProgram");
		glLogicOp = (delegate *unmanaged[Cdecl]<LogicOp,void>) handler.Invoke("glLogicOp");
		glMapBuffer = (delegate *unmanaged[Cdecl]<BufferTarget,BufferAccess,IntPtr>) handler.Invoke("glMapBuffer");
		glMapBufferRange = (delegate *unmanaged[Cdecl]<BufferTarget,nint,nint,MapBufferAccessMask,IntPtr>) handler.Invoke("glMapBufferRange");
		glMultiDrawArrays = (delegate *unmanaged[Cdecl]<PrimitiveType,int*,int*,int,void>) handler.Invoke("glMultiDrawArrays");
		glMultiDrawElements = (delegate *unmanaged[Cdecl]<PrimitiveType,int*,DrawElementsType,void**,int,void>) handler.Invoke("glMultiDrawElements");
		glMultiDrawElementsBaseVertex = (delegate *unmanaged[Cdecl]<PrimitiveType,int*,DrawElementsType,void**,int,int*,void>) handler.Invoke("glMultiDrawElementsBaseVertex");
		glMultiTexCoordP1ui = (delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int,void>) handler.Invoke("glMultiTexCoordP1ui");
		glMultiTexCoordP1uiv = (delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int*,void>) handler.Invoke("glMultiTexCoordP1uiv");
		glMultiTexCoordP2ui = (delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int,void>) handler.Invoke("glMultiTexCoordP2ui");
		glMultiTexCoordP2uiv = (delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int*,void>) handler.Invoke("glMultiTexCoordP2uiv");
		glMultiTexCoordP3ui = (delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int,void>) handler.Invoke("glMultiTexCoordP3ui");
		glMultiTexCoordP3uiv = (delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int*,void>) handler.Invoke("glMultiTexCoordP3uiv");
		glMultiTexCoordP4ui = (delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int,void>) handler.Invoke("glMultiTexCoordP4ui");
		glMultiTexCoordP4uiv = (delegate *unmanaged[Cdecl]<TextureUnit,TexCoordPointerType,int*,void>) handler.Invoke("glMultiTexCoordP4uiv");
		glNormalP3ui = (delegate *unmanaged[Cdecl]<NormalPointerType,int,void>) handler.Invoke("glNormalP3ui");
		glNormalP3uiv = (delegate *unmanaged[Cdecl]<NormalPointerType,int*,void>) handler.Invoke("glNormalP3uiv");
		glObjectLabel = (delegate *unmanaged[Cdecl]<ObjectIdentifier,int,int,byte*,void>) handler.Invoke("glObjectLabel");
		glObjectPtrLabel = (delegate *unmanaged[Cdecl]<void*,int,byte*,void>) handler.Invoke("glObjectPtrLabel");
		glPixelStoref = (delegate *unmanaged[Cdecl]<PixelStoreParameter,float,void>) handler.Invoke("glPixelStoref");
		glPixelStorei = (delegate *unmanaged[Cdecl]<PixelStoreParameter,int,void>) handler.Invoke("glPixelStorei");
		glPointParameterf = (delegate *unmanaged[Cdecl]<PointParameterName,float,void>) handler.Invoke("glPointParameterf");
		glPointParameterfv = (delegate *unmanaged[Cdecl]<PointParameterName,float*,void>) handler.Invoke("glPointParameterfv");
		glPointParameteri = (delegate *unmanaged[Cdecl]<PointParameterName,int,void>) handler.Invoke("glPointParameteri");
		glPointParameteriv = (delegate *unmanaged[Cdecl]<PointParameterName,int*,void>) handler.Invoke("glPointParameteriv");
		glPointSize = (delegate *unmanaged[Cdecl]<float,void>) handler.Invoke("glPointSize");
		glPolygonMode = (delegate *unmanaged[Cdecl]<MaterialFace,PolygonMode,void>) handler.Invoke("glPolygonMode");
		glPolygonOffset = (delegate *unmanaged[Cdecl]<float,float,void>) handler.Invoke("glPolygonOffset");
		glPopDebugGroup = (delegate *unmanaged[Cdecl]<void>) handler.Invoke("glPopDebugGroup");
		glPrimitiveRestartIndex = (delegate *unmanaged[Cdecl]<int,void>) handler.Invoke("glPrimitiveRestartIndex");
		glProvokingVertex = (delegate *unmanaged[Cdecl]<VertexProvokingMode,void>) handler.Invoke("glProvokingVertex");
		glPushDebugGroup = (delegate *unmanaged[Cdecl]<DebugSource,int,int,byte*,void>) handler.Invoke("glPushDebugGroup");
		glQueryCounter = (delegate *unmanaged[Cdecl]<Query,QueryCounterTarget,void>) handler.Invoke("glQueryCounter");
		glReadBuffer = (delegate *unmanaged[Cdecl]<ReadBufferMode,void>) handler.Invoke("glReadBuffer");
		glReadPixels = (delegate *unmanaged[Cdecl]<int,int,int,int,PixelFormat,PixelType,void*,void>) handler.Invoke("glReadPixels");
		glRenderbufferStorage = (delegate *unmanaged[Cdecl]<RenderbufferTarget,InternalFormat,int,int,void>) handler.Invoke("glRenderbufferStorage");
		glRenderbufferStorageMultisample = (delegate *unmanaged[Cdecl]<RenderbufferTarget,int,InternalFormat,int,int,void>) handler.Invoke("glRenderbufferStorageMultisample");
		glSampleCoverage = (delegate *unmanaged[Cdecl]<float,bool,void>) handler.Invoke("glSampleCoverage");
		glSampleMaski = (delegate *unmanaged[Cdecl]<int,int,void>) handler.Invoke("glSampleMaski");
		glSamplerParameterIiv = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int*,void>) handler.Invoke("glSamplerParameterIiv");
		glSamplerParameterIuiv = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,uint*,void>) handler.Invoke("glSamplerParameterIuiv");
		glSamplerParameterf = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterF,float,void>) handler.Invoke("glSamplerParameterf");
		glSamplerParameterfv = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterF,float*,void>) handler.Invoke("glSamplerParameterfv");
		glSamplerParameteri = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int,void>) handler.Invoke("glSamplerParameteri");
		glSamplerParameteriv = (delegate *unmanaged[Cdecl]<Sampler,SamplerParameterI,int*,void>) handler.Invoke("glSamplerParameteriv");
		glScissor = (delegate *unmanaged[Cdecl]<int,int,int,int,void>) handler.Invoke("glScissor");
		glSecondaryColorP3ui = (delegate *unmanaged[Cdecl]<ColorPointerType,int,void>) handler.Invoke("glSecondaryColorP3ui");
		glSecondaryColorP3uiv = (delegate *unmanaged[Cdecl]<ColorPointerType,int*,void>) handler.Invoke("glSecondaryColorP3uiv");
		glShaderSource = (delegate *unmanaged[Cdecl]<Shader,int,byte**,int*,void>) handler.Invoke("glShaderSource");
		glStencilFunc = (delegate *unmanaged[Cdecl]<StencilFunction,int,uint,void>) handler.Invoke("glStencilFunc");
		glStencilFuncSeparate = (delegate *unmanaged[Cdecl]<StencilFaceDirection,StencilFunction,int,uint,void>) handler.Invoke("glStencilFuncSeparate");
		glStencilMask = (delegate *unmanaged[Cdecl]<uint,void>) handler.Invoke("glStencilMask");
		glStencilMaskSeparate = (delegate *unmanaged[Cdecl]<StencilFaceDirection,uint,void>) handler.Invoke("glStencilMaskSeparate");
		glStencilOp = (delegate *unmanaged[Cdecl]<StencilOp,StencilOp,StencilOp,void>) handler.Invoke("glStencilOp");
		glStencilOpSeparate = (delegate *unmanaged[Cdecl]<StencilFaceDirection,StencilOp,StencilOp,StencilOp,void>) handler.Invoke("glStencilOpSeparate");
		glTexBuffer = (delegate *unmanaged[Cdecl]<TextureTarget,SizedInternalFormat,Buffer,void>) handler.Invoke("glTexBuffer");
		glTexCoordP1ui = (delegate *unmanaged[Cdecl]<TexCoordPointerType,int,void>) handler.Invoke("glTexCoordP1ui");
		glTexCoordP1uiv = (delegate *unmanaged[Cdecl]<TexCoordPointerType,int*,void>) handler.Invoke("glTexCoordP1uiv");
		glTexCoordP2ui = (delegate *unmanaged[Cdecl]<TexCoordPointerType,int,void>) handler.Invoke("glTexCoordP2ui");
		glTexCoordP2uiv = (delegate *unmanaged[Cdecl]<TexCoordPointerType,int*,void>) handler.Invoke("glTexCoordP2uiv");
		glTexCoordP3ui = (delegate *unmanaged[Cdecl]<TexCoordPointerType,int,void>) handler.Invoke("glTexCoordP3ui");
		glTexCoordP3uiv = (delegate *unmanaged[Cdecl]<TexCoordPointerType,int*,void>) handler.Invoke("glTexCoordP3uiv");
		glTexCoordP4ui = (delegate *unmanaged[Cdecl]<TexCoordPointerType,int,void>) handler.Invoke("glTexCoordP4ui");
		glTexCoordP4uiv = (delegate *unmanaged[Cdecl]<TexCoordPointerType,int*,void>) handler.Invoke("glTexCoordP4uiv");
		glTexImage1D = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,PixelFormat,PixelType,void*,void>) handler.Invoke("glTexImage1D");
		glTexImage2D = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,PixelFormat,PixelType,void*,void>) handler.Invoke("glTexImage2D");
		glTexImage2DMultisample = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,bool,void>) handler.Invoke("glTexImage2DMultisample");
		glTexImage3D = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,int,PixelFormat,PixelType,void*,void>) handler.Invoke("glTexImage3D");
		glTexImage3DMultisample = (delegate *unmanaged[Cdecl]<TextureTarget,int,InternalFormat,int,int,int,bool,void>) handler.Invoke("glTexImage3DMultisample");
		glTexParameterIiv = (delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,int*,void>) handler.Invoke("glTexParameterIiv");
		glTexParameterIuiv = (delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,uint*,void>) handler.Invoke("glTexParameterIuiv");
		glTexParameterf = (delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,float,void>) handler.Invoke("glTexParameterf");
		glTexParameterfv = (delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,float*,void>) handler.Invoke("glTexParameterfv");
		glTexParameteri = (delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,int,void>) handler.Invoke("glTexParameteri");
		glTexParameteriv = (delegate *unmanaged[Cdecl]<TextureTarget,TextureParameter,int*,void>) handler.Invoke("glTexParameteriv");
		glTexSubImage1D = (delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,PixelFormat,PixelType,void*,void>) handler.Invoke("glTexSubImage1D");
		glTexSubImage2D = (delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,PixelFormat,PixelType,void*,void>) handler.Invoke("glTexSubImage2D");
		glTexSubImage3D = (delegate *unmanaged[Cdecl]<TextureTarget,int,int,int,int,int,int,int,PixelFormat,PixelType,void*,void>) handler.Invoke("glTexSubImage3D");
		glTransformFeedbackVaryings = (delegate *unmanaged[Cdecl]<Program,int,byte**,TransformFeedbackBufferMode,void>) handler.Invoke("glTransformFeedbackVaryings");
		glUniform1f = (delegate *unmanaged[Cdecl]<int,float,void>) handler.Invoke("glUniform1f");
		glUniform1fv = (delegate *unmanaged[Cdecl]<int,int,float*,void>) handler.Invoke("glUniform1fv");
		glUniform1i = (delegate *unmanaged[Cdecl]<int,int,void>) handler.Invoke("glUniform1i");
		glUniform1iv = (delegate *unmanaged[Cdecl]<int,int,int*,void>) handler.Invoke("glUniform1iv");
		glUniform1ui = (delegate *unmanaged[Cdecl]<int,uint,void>) handler.Invoke("glUniform1ui");
		glUniform1uiv = (delegate *unmanaged[Cdecl]<int,int,uint*,void>) handler.Invoke("glUniform1uiv");
		glUniform2f = (delegate *unmanaged[Cdecl]<int,float,float,void>) handler.Invoke("glUniform2f");
		glUniform2fv = (delegate *unmanaged[Cdecl]<int,int,float*,void>) handler.Invoke("glUniform2fv");
		glUniform2i = (delegate *unmanaged[Cdecl]<int,int,int,void>) handler.Invoke("glUniform2i");
		glUniform2iv = (delegate *unmanaged[Cdecl]<int,int,int*,void>) handler.Invoke("glUniform2iv");
		glUniform2ui = (delegate *unmanaged[Cdecl]<int,uint,uint,void>) handler.Invoke("glUniform2ui");
		glUniform2uiv = (delegate *unmanaged[Cdecl]<int,int,uint*,void>) handler.Invoke("glUniform2uiv");
		glUniform3f = (delegate *unmanaged[Cdecl]<int,float,float,float,void>) handler.Invoke("glUniform3f");
		glUniform3fv = (delegate *unmanaged[Cdecl]<int,int,float*,void>) handler.Invoke("glUniform3fv");
		glUniform3i = (delegate *unmanaged[Cdecl]<int,int,int,int,void>) handler.Invoke("glUniform3i");
		glUniform3iv = (delegate *unmanaged[Cdecl]<int,int,int*,void>) handler.Invoke("glUniform3iv");
		glUniform3ui = (delegate *unmanaged[Cdecl]<int,uint,uint,uint,void>) handler.Invoke("glUniform3ui");
		glUniform3uiv = (delegate *unmanaged[Cdecl]<int,int,uint*,void>) handler.Invoke("glUniform3uiv");
		glUniform4f = (delegate *unmanaged[Cdecl]<int,float,float,float,float,void>) handler.Invoke("glUniform4f");
		glUniform4fv = (delegate *unmanaged[Cdecl]<int,int,float*,void>) handler.Invoke("glUniform4fv");
		glUniform4i = (delegate *unmanaged[Cdecl]<int,int,int,int,int,void>) handler.Invoke("glUniform4i");
		glUniform4iv = (delegate *unmanaged[Cdecl]<int,int,int*,void>) handler.Invoke("glUniform4iv");
		glUniform4ui = (delegate *unmanaged[Cdecl]<int,uint,uint,uint,uint,void>) handler.Invoke("glUniform4ui");
		glUniform4uiv = (delegate *unmanaged[Cdecl]<int,int,uint*,void>) handler.Invoke("glUniform4uiv");
		glUniformBlockBinding = (delegate *unmanaged[Cdecl]<Program,int,int,void>) handler.Invoke("glUniformBlockBinding");
		glUniformMatrix2fv = (delegate *unmanaged[Cdecl]<int,int,bool,float*,void>) handler.Invoke("glUniformMatrix2fv");
		glUniformMatrix2x3fv = (delegate *unmanaged[Cdecl]<int,int,bool,float*,void>) handler.Invoke("glUniformMatrix2x3fv");
		glUniformMatrix2x4fv = (delegate *unmanaged[Cdecl]<int,int,bool,float*,void>) handler.Invoke("glUniformMatrix2x4fv");
		glUniformMatrix3fv = (delegate *unmanaged[Cdecl]<int,int,bool,float*,void>) handler.Invoke("glUniformMatrix3fv");
		glUniformMatrix3x2fv = (delegate *unmanaged[Cdecl]<int,int,bool,float*,void>) handler.Invoke("glUniformMatrix3x2fv");
		glUniformMatrix3x4fv = (delegate *unmanaged[Cdecl]<int,int,bool,float*,void>) handler.Invoke("glUniformMatrix3x4fv");
		glUniformMatrix4fv = (delegate *unmanaged[Cdecl]<int,int,bool,float*,void>) handler.Invoke("glUniformMatrix4fv");
		glUniformMatrix4x2fv = (delegate *unmanaged[Cdecl]<int,int,bool,float*,void>) handler.Invoke("glUniformMatrix4x2fv");
		glUniformMatrix4x3fv = (delegate *unmanaged[Cdecl]<int,int,bool,float*,void>) handler.Invoke("glUniformMatrix4x3fv");
		glUnmapBuffer = (delegate *unmanaged[Cdecl]<BufferTarget,bool>) handler.Invoke("glUnmapBuffer");
		glUseProgram = (delegate *unmanaged[Cdecl]<Program,void>) handler.Invoke("glUseProgram");
		glValidateProgram = (delegate *unmanaged[Cdecl]<Program,void>) handler.Invoke("glValidateProgram");
		glVertexAttrib1d = (delegate *unmanaged[Cdecl]<int,double,void>) handler.Invoke("glVertexAttrib1d");
		glVertexAttrib1dv = (delegate *unmanaged[Cdecl]<int,double*,void>) handler.Invoke("glVertexAttrib1dv");
		glVertexAttrib1f = (delegate *unmanaged[Cdecl]<int,float,void>) handler.Invoke("glVertexAttrib1f");
		glVertexAttrib1fv = (delegate *unmanaged[Cdecl]<int,float*,void>) handler.Invoke("glVertexAttrib1fv");
		glVertexAttrib1s = (delegate *unmanaged[Cdecl]<int,short,void>) handler.Invoke("glVertexAttrib1s");
		glVertexAttrib1sv = (delegate *unmanaged[Cdecl]<int,short*,void>) handler.Invoke("glVertexAttrib1sv");
		glVertexAttrib2d = (delegate *unmanaged[Cdecl]<int,double,double,void>) handler.Invoke("glVertexAttrib2d");
		glVertexAttrib2dv = (delegate *unmanaged[Cdecl]<int,double*,void>) handler.Invoke("glVertexAttrib2dv");
		glVertexAttrib2f = (delegate *unmanaged[Cdecl]<int,float,float,void>) handler.Invoke("glVertexAttrib2f");
		glVertexAttrib2fv = (delegate *unmanaged[Cdecl]<int,float*,void>) handler.Invoke("glVertexAttrib2fv");
		glVertexAttrib2s = (delegate *unmanaged[Cdecl]<int,short,short,void>) handler.Invoke("glVertexAttrib2s");
		glVertexAttrib2sv = (delegate *unmanaged[Cdecl]<int,short*,void>) handler.Invoke("glVertexAttrib2sv");
		glVertexAttrib3d = (delegate *unmanaged[Cdecl]<int,double,double,double,void>) handler.Invoke("glVertexAttrib3d");
		glVertexAttrib3dv = (delegate *unmanaged[Cdecl]<int,double*,void>) handler.Invoke("glVertexAttrib3dv");
		glVertexAttrib3f = (delegate *unmanaged[Cdecl]<int,float,float,float,void>) handler.Invoke("glVertexAttrib3f");
		glVertexAttrib3fv = (delegate *unmanaged[Cdecl]<int,float*,void>) handler.Invoke("glVertexAttrib3fv");
		glVertexAttrib3s = (delegate *unmanaged[Cdecl]<int,short,short,short,void>) handler.Invoke("glVertexAttrib3s");
		glVertexAttrib3sv = (delegate *unmanaged[Cdecl]<int,short*,void>) handler.Invoke("glVertexAttrib3sv");
		glVertexAttrib4Nbv = (delegate *unmanaged[Cdecl]<int,sbyte*,void>) handler.Invoke("glVertexAttrib4Nbv");
		glVertexAttrib4Niv = (delegate *unmanaged[Cdecl]<int,int*,void>) handler.Invoke("glVertexAttrib4Niv");
		glVertexAttrib4Nsv = (delegate *unmanaged[Cdecl]<int,short*,void>) handler.Invoke("glVertexAttrib4Nsv");
		glVertexAttrib4Nub = (delegate *unmanaged[Cdecl]<int,byte,byte,byte,byte,void>) handler.Invoke("glVertexAttrib4Nub");
		glVertexAttrib4Nubv = (delegate *unmanaged[Cdecl]<int,byte*,void>) handler.Invoke("glVertexAttrib4Nubv");
		glVertexAttrib4Nuiv = (delegate *unmanaged[Cdecl]<int,uint*,void>) handler.Invoke("glVertexAttrib4Nuiv");
		glVertexAttrib4Nusv = (delegate *unmanaged[Cdecl]<int,ushort*,void>) handler.Invoke("glVertexAttrib4Nusv");
		glVertexAttrib4bv = (delegate *unmanaged[Cdecl]<int,sbyte*,void>) handler.Invoke("glVertexAttrib4bv");
		glVertexAttrib4d = (delegate *unmanaged[Cdecl]<int,double,double,double,double,void>) handler.Invoke("glVertexAttrib4d");
		glVertexAttrib4dv = (delegate *unmanaged[Cdecl]<int,double*,void>) handler.Invoke("glVertexAttrib4dv");
		glVertexAttrib4f = (delegate *unmanaged[Cdecl]<int,float,float,float,float,void>) handler.Invoke("glVertexAttrib4f");
		glVertexAttrib4fv = (delegate *unmanaged[Cdecl]<int,float*,void>) handler.Invoke("glVertexAttrib4fv");
		glVertexAttrib4iv = (delegate *unmanaged[Cdecl]<int,int*,void>) handler.Invoke("glVertexAttrib4iv");
		glVertexAttrib4s = (delegate *unmanaged[Cdecl]<int,short,short,short,short,void>) handler.Invoke("glVertexAttrib4s");
		glVertexAttrib4sv = (delegate *unmanaged[Cdecl]<int,short*,void>) handler.Invoke("glVertexAttrib4sv");
		glVertexAttrib4ubv = (delegate *unmanaged[Cdecl]<int,byte*,void>) handler.Invoke("glVertexAttrib4ubv");
		glVertexAttrib4uiv = (delegate *unmanaged[Cdecl]<int,uint*,void>) handler.Invoke("glVertexAttrib4uiv");
		glVertexAttrib4usv = (delegate *unmanaged[Cdecl]<int,ushort*,void>) handler.Invoke("glVertexAttrib4usv");
		glVertexAttribDivisor = (delegate *unmanaged[Cdecl]<int,int,void>) handler.Invoke("glVertexAttribDivisor");
		glVertexAttribI1i = (delegate *unmanaged[Cdecl]<int,int,void>) handler.Invoke("glVertexAttribI1i");
		glVertexAttribI1iv = (delegate *unmanaged[Cdecl]<int,int*,void>) handler.Invoke("glVertexAttribI1iv");
		glVertexAttribI1ui = (delegate *unmanaged[Cdecl]<int,uint,void>) handler.Invoke("glVertexAttribI1ui");
		glVertexAttribI1uiv = (delegate *unmanaged[Cdecl]<int,uint*,void>) handler.Invoke("glVertexAttribI1uiv");
		glVertexAttribI2i = (delegate *unmanaged[Cdecl]<int,int,int,void>) handler.Invoke("glVertexAttribI2i");
		glVertexAttribI2iv = (delegate *unmanaged[Cdecl]<int,int*,void>) handler.Invoke("glVertexAttribI2iv");
		glVertexAttribI2ui = (delegate *unmanaged[Cdecl]<int,uint,uint,void>) handler.Invoke("glVertexAttribI2ui");
		glVertexAttribI2uiv = (delegate *unmanaged[Cdecl]<int,uint*,void>) handler.Invoke("glVertexAttribI2uiv");
		glVertexAttribI3i = (delegate *unmanaged[Cdecl]<int,int,int,int,void>) handler.Invoke("glVertexAttribI3i");
		glVertexAttribI3iv = (delegate *unmanaged[Cdecl]<int,int*,void>) handler.Invoke("glVertexAttribI3iv");
		glVertexAttribI3ui = (delegate *unmanaged[Cdecl]<int,uint,uint,uint,void>) handler.Invoke("glVertexAttribI3ui");
		glVertexAttribI3uiv = (delegate *unmanaged[Cdecl]<int,uint*,void>) handler.Invoke("glVertexAttribI3uiv");
		glVertexAttribI4bv = (delegate *unmanaged[Cdecl]<int,sbyte*,void>) handler.Invoke("glVertexAttribI4bv");
		glVertexAttribI4i = (delegate *unmanaged[Cdecl]<int,int,int,int,int,void>) handler.Invoke("glVertexAttribI4i");
		glVertexAttribI4iv = (delegate *unmanaged[Cdecl]<int,int*,void>) handler.Invoke("glVertexAttribI4iv");
		glVertexAttribI4sv = (delegate *unmanaged[Cdecl]<int,short*,void>) handler.Invoke("glVertexAttribI4sv");
		glVertexAttribI4ubv = (delegate *unmanaged[Cdecl]<int,byte*,void>) handler.Invoke("glVertexAttribI4ubv");
		glVertexAttribI4ui = (delegate *unmanaged[Cdecl]<int,uint,uint,uint,uint,void>) handler.Invoke("glVertexAttribI4ui");
		glVertexAttribI4uiv = (delegate *unmanaged[Cdecl]<int,uint*,void>) handler.Invoke("glVertexAttribI4uiv");
		glVertexAttribI4usv = (delegate *unmanaged[Cdecl]<int,ushort*,void>) handler.Invoke("glVertexAttribI4usv");
		glVertexAttribIPointer = (delegate *unmanaged[Cdecl]<int,int,VertexAttribIType,int,nint,void>) handler.Invoke("glVertexAttribIPointer");
		glVertexAttribP1ui = (delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int,void>) handler.Invoke("glVertexAttribP1ui");
		glVertexAttribP1uiv = (delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int*,void>) handler.Invoke("glVertexAttribP1uiv");
		glVertexAttribP2ui = (delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int,void>) handler.Invoke("glVertexAttribP2ui");
		glVertexAttribP2uiv = (delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int*,void>) handler.Invoke("glVertexAttribP2uiv");
		glVertexAttribP3ui = (delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int,void>) handler.Invoke("glVertexAttribP3ui");
		glVertexAttribP3uiv = (delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int*,void>) handler.Invoke("glVertexAttribP3uiv");
		glVertexAttribP4ui = (delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int,void>) handler.Invoke("glVertexAttribP4ui");
		glVertexAttribP4uiv = (delegate *unmanaged[Cdecl]<int,VertexAttribType,bool,int*,void>) handler.Invoke("glVertexAttribP4uiv");
		glVertexAttribPointer = (delegate *unmanaged[Cdecl]<int,int,VertexAttribType,bool,int,nint,void>) handler.Invoke("glVertexAttribPointer");
		glVertexP2ui = (delegate *unmanaged[Cdecl]<VertexPointerType,int,void>) handler.Invoke("glVertexP2ui");
		glVertexP2uiv = (delegate *unmanaged[Cdecl]<VertexPointerType,int*,void>) handler.Invoke("glVertexP2uiv");
		glVertexP3ui = (delegate *unmanaged[Cdecl]<VertexPointerType,int,void>) handler.Invoke("glVertexP3ui");
		glVertexP3uiv = (delegate *unmanaged[Cdecl]<VertexPointerType,int*,void>) handler.Invoke("glVertexP3uiv");
		glVertexP4ui = (delegate *unmanaged[Cdecl]<VertexPointerType,int,void>) handler.Invoke("glVertexP4ui");
		glVertexP4uiv = (delegate *unmanaged[Cdecl]<VertexPointerType,int*,void>) handler.Invoke("glVertexP4uiv");
		glViewport = (delegate *unmanaged[Cdecl]<int,int,int,int,void>) handler.Invoke("glViewport");
		glWaitSync = (delegate *unmanaged[Cdecl]<Sync,SyncBehaviorFlags,ulong,void>) handler.Invoke("glWaitSync");

		IsLoaded = true;
	}
}