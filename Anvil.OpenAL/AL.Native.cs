using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using Anvil.Native;
using JetBrains.Annotations;
// ReSharper disable InconsistentNaming
// ReSharper disable IdentifierTypo
// ReSharper disable StringLiteralTypo

namespace Anvil.OpenAL;

[SuppressUnmanagedCodeSecurity, PublicAPI]
public static unsafe partial class AL
{
	private static delegate *unmanaged[Cdecl]<float,void> alDopplerFactor;
	private static delegate *unmanaged[Cdecl]<float,void> alDopplerVelocity;
	private static delegate *unmanaged[Cdecl]<float,void> alSpeedOfSound;
	private static delegate *unmanaged[Cdecl]<DistanceModel,void> alDistanceModel;
	private static delegate *unmanaged[Cdecl]<int,void> alEnable;
	private static delegate *unmanaged[Cdecl]<int,void> alDisable;
	private static delegate *unmanaged[Cdecl]<int,bool> alIsEnabled;
	private static delegate *unmanaged[Cdecl]<int,byte*> alGetString;
	private static delegate *unmanaged[Cdecl]<int,bool*,void> alGetBooleanv;
	private static delegate *unmanaged[Cdecl]<int,int*,void> alGetIntegerv;
	private static delegate *unmanaged[Cdecl]<int,float*,void> alGetFloatv;
	private static delegate *unmanaged[Cdecl]<int,double*,void> alGetDoublev;
	private static delegate *unmanaged[Cdecl]<int,bool> alGetBoolean;
	private static delegate *unmanaged[Cdecl]<int,int> alGetInteger;
	private static delegate *unmanaged[Cdecl]<int,float> alGetFloat;
	private static delegate *unmanaged[Cdecl]<int,double> alGetDouble;
	private static delegate *unmanaged[Cdecl]<Error> alGetError;
	private static delegate *unmanaged[Cdecl]<byte*,bool> alIsExtensionPresent;
	private static delegate *unmanaged[Cdecl]<byte*,void*> alGetProcAddress;
	private static delegate *unmanaged[Cdecl]<byte*,int> alGetEnumValue;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,float,void> alListenerf;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,float,float,float,void> alListener3f;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,float*,void> alListenerfv;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,int,void> alListeneri;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,int,int,int,void> alListener3i;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,int*,void> alListeneriv;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,float*,void> alGetListenerf;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,float*,float*,float*,void> alGetListener3f;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,float*,void> alGetListenerfv;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,int*,void> alGetListeneri;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,int*,int*,int*,void> alGetListener3i;
	private static delegate *unmanaged[Cdecl]<ListenerProperty,int*,void> alGetListeneriv;
	private static delegate *unmanaged[Cdecl]<int,Source*,void> alGenSources;
	private static delegate *unmanaged[Cdecl]<int,Source*,void> alDeleteSources;
	private static delegate *unmanaged[Cdecl]<Source,bool> alIsSource;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,float,void> alSourcef;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,float,float,float,void> alSource3f;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,float*,void> alSourcefv;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,int,void> alSourcei;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,int,int,int,void> alSource3i;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,int*,void> alSourceiv;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,float*,void> alGetSourcef;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,float*,float*,float*,void> alGetSource3f;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,float*,void> alGetSourcefv;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,int*,void> alGetSourcei;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,int*,int*,int*,void> alGetSource3i;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,int*,void> alGetSourceiv;
	private static delegate *unmanaged[Cdecl]<int,Source*,void> alSourcePlayv;
	private static delegate *unmanaged[Cdecl]<int,Source*,void> alSourceStopv;
	private static delegate *unmanaged[Cdecl]<int,Source*,void> alSourceRewindv;
	private static delegate *unmanaged[Cdecl]<int,Source*,void> alSourcePausev;
	private static delegate *unmanaged[Cdecl]<Source,void> alSourcePlay;
	private static delegate *unmanaged[Cdecl]<Source,void> alSourceStop;
	private static delegate *unmanaged[Cdecl]<Source,void> alSourceRewind;
	private static delegate *unmanaged[Cdecl]<Source,void> alSourcePause;
	private static delegate *unmanaged[Cdecl]<Source,int,Buffer*,void> alSourceQueueBuffers;
	private static delegate *unmanaged[Cdecl]<Source,int,Buffer*,void> alSourceUnqueueBuffers;
	private static delegate *unmanaged[Cdecl]<int,Buffer*,void> alGenBuffers;
	private static delegate *unmanaged[Cdecl]<int,Buffer*,void> alDeleteBuffers;
	private static delegate *unmanaged[Cdecl]<Buffer,bool> alIsBuffer;
	private static delegate *unmanaged[Cdecl]<Buffer,AudioFormat,void*,int,int,void> alBufferData;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float,void> alBufferf;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float,float,float,void> alBuffer3f;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float*,void> alBufferfv;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int,void> alBufferi;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int,int,int,void> alBuffer3i;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int*,void> alBufferiv;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float*,void> alGetBufferf;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float*,float*,float*,void> alGetBuffer3f;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float*,void> alGetBufferfv;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int*,void> alGetBufferi;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int*,int*,int*,void> alGetBuffer3i;
	private static delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int*,void> alGetBufferiv;
	private static delegate *unmanaged[Cdecl]<Buffer,AudioFormat,void*,int,int,void> alBufferDataStatic;
	private static delegate *unmanaged[Cdecl]<Buffer,AudioFormat,void*,int,int,void> alBufferSubDataSOFT;
	private static delegate *unmanaged[Cdecl]<FoldbackMode,int,int,float*,FoldbackCallback,void> alRequestFoldbackStart;
	private static delegate *unmanaged[Cdecl]<void> alRequestFoldbackStop;
	private static delegate *unmanaged[Cdecl]<Buffer,int,BufferFormat,int,BufferChannels,SampleType,void*,void> alBufferSamplesSOFT;
	private static delegate *unmanaged[Cdecl]<Buffer,int,int,BufferChannels,SampleType,void*,void> alBufferSubSamplesSOFT;
	private static delegate *unmanaged[Cdecl]<Buffer,int,int,BufferChannels,SampleType,void*,void> alGetBufferSamplesSOFT;
	private static delegate *unmanaged[Cdecl]<BufferFormat,bool> alIsBufferFormatSupportedSOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,double,void> alSourcedSOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,double,double,double,void> alSource3dSOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,double*,void> alSourcedvSOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,double*,void> alGetSourcedSOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,double*,double*,double*,void> alGetSource3dSOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,double*,void> alGetSourcedvSOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,long,void> alSourcei64SOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,long,long,long,void> alSource3i64SOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,long*,void> alSourcei64vSOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,long*,void> alGetSourcei64SOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,long*,long*,long*,void> alGetSource3i64SOFT;
	private static delegate *unmanaged[Cdecl]<Source,SourceProperty,long*,void> alGetSourcei64vSOFT;
	private static delegate *unmanaged[Cdecl]<void> alDeferUpdatesSOFT;
	private static delegate *unmanaged[Cdecl]<void> alProcessUpdatesSOFT;
	private static delegate *unmanaged[Cdecl]<int,int,byte*> alGetStringiSOFT;
	private static delegate *unmanaged[Cdecl]<int,EventType*,bool,void> alEventControlSOFT;
	private static delegate *unmanaged[Cdecl]<EventProc,IntPtr,void> alEventCallbackSOFT;
	// Implemented as events
	// private static delegate *unmanaged[Cdecl]<int,IntPtr> alGetPointerSOFT;
	// private static delegate *unmanaged[Cdecl]<int,void**,void> alGetPointervSOFT;
	private static delegate *unmanaged[Cdecl]<Buffer,int,int,BufferCallbackHandler,IntPtr,void> alBufferCallbackSOFT;
	private static delegate *unmanaged[Cdecl]<Buffer,int,void**,void> alGetBufferPtrSOFT;
	private static delegate *unmanaged[Cdecl]<Buffer,int,void**,void**,void**,void> alGetBuffer3PtrSOFT;
	private static delegate *unmanaged[Cdecl]<Buffer,int,void**,void> alGetBufferPtrvSOFT;
	private static delegate *unmanaged[Cdecl]<int,Effect*,void> alGenEffects;
	private static delegate *unmanaged[Cdecl]<int,Effect*,void> alDeleteEffects;
	private static delegate *unmanaged[Cdecl]<Effect,bool> alIsEffect;
	private static delegate *unmanaged[Cdecl]<Effect,EffectProperty,int,void> alEffecti;
	private static delegate *unmanaged[Cdecl]<Effect,EffectProperty,int*,void> alEffectiv;
	private static delegate *unmanaged[Cdecl]<Effect,EffectProperty,float,void> alEffectf;
	private static delegate *unmanaged[Cdecl]<Effect,EffectProperty,float*,void> alEffectfv;
	private static delegate *unmanaged[Cdecl]<Effect,EffectProperty,int*,void> alGetEffecti;
	private static delegate *unmanaged[Cdecl]<Effect,EffectProperty,int*,void> alGetEffectiv;
	private static delegate *unmanaged[Cdecl]<Effect,EffectProperty,float*,void> alGetEffectf;
	private static delegate *unmanaged[Cdecl]<Effect,EffectProperty,float*,void> alGetEffectfv;
	private static delegate *unmanaged[Cdecl]<Effect,ReverbParam,int,void> alEffectiReverb;
	private static delegate *unmanaged[Cdecl]<Effect,ReverbParam,float,void> alEffectfReverb;
	private static delegate *unmanaged[Cdecl]<Effect,EaxReverbParam,int,void> alEffectiEaxReverb;
	private static delegate *unmanaged[Cdecl]<Effect,EaxReverbParam,float,void> alEffectfEaxReverb;
	private static delegate *unmanaged[Cdecl]<Effect,EaxReverbParam,float*,void> alEffectfvEaxReverb;
	private static delegate *unmanaged[Cdecl]<int,Filter*,void> alGenFilters;
	private static delegate *unmanaged[Cdecl]<int,Filter*,void> alDeleteFilters;
	private static delegate *unmanaged[Cdecl]<Filter,bool> alIsFilter;
	private static delegate *unmanaged[Cdecl]<Filter,FilterProperty,int,void> alFilteri;
	private static delegate *unmanaged[Cdecl]<Filter,FilterProperty,int*,void> alFilteriv;
	private static delegate *unmanaged[Cdecl]<Filter,FilterProperty,float,void> alFilterf;
	private static delegate *unmanaged[Cdecl]<Filter,FilterProperty,float*,void> alFilterfv;
	private static delegate *unmanaged[Cdecl]<Filter,FilterProperty,int*,void> alGetFilteri;
	private static delegate *unmanaged[Cdecl]<Filter,FilterProperty,int*,void> alGetFilteriv;
	private static delegate *unmanaged[Cdecl]<Filter,FilterProperty,float*,void> alGetFilterf;
	private static delegate *unmanaged[Cdecl]<Filter,FilterProperty,float*,void> alGetFilterfv;
	private static delegate *unmanaged[Cdecl]<int,EffectSlot*,void> alGenAuxiliaryEffectSlots;
	private static delegate *unmanaged[Cdecl]<int,EffectSlot*,void> alDeleteAuxiliaryEffectSlots;
	private static delegate *unmanaged[Cdecl]<EffectSlot,bool> alIsAuxiliaryEffectSlot;
	private static delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,int,void> alAuxiliaryEffectSloti;
	private static delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,int*,void> alAuxiliaryEffectSlotiv;
	private static delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,float,void> alAuxiliaryEffectSlotf;
	private static delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,float*,void> alAuxiliaryEffectSlotfv;
	private static delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,int*,void> alGetAuxiliaryEffectSloti;
	private static delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,int*,void> alGetAuxiliaryEffectSlotiv;
	private static delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,float*,void> alGetAuxiliaryEffectSlotf;
	private static delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,float*,void> alGetAuxiliaryEffectSlotfv;
	
	internal static void Load(Device device)
	{
		alDopplerFactor = (delegate *unmanaged[Cdecl]<float,void>) ALC.GetProcAddress(device, "alDopplerFactor");
		alDopplerVelocity = (delegate *unmanaged[Cdecl]<float,void>) ALC.GetProcAddress(device, "alDopplerVelocity");
		alSpeedOfSound = (delegate *unmanaged[Cdecl]<float,void>) ALC.GetProcAddress(device, "alSpeedOfSound");
		alDistanceModel = (delegate *unmanaged[Cdecl]<DistanceModel,void>) ALC.GetProcAddress(device, "alDistanceModel");
		alEnable = (delegate *unmanaged[Cdecl]<int,void>) ALC.GetProcAddress(device, "alEnable");
		alDisable = (delegate *unmanaged[Cdecl]<int,void>) ALC.GetProcAddress(device, "alDisable");
		alIsEnabled = (delegate *unmanaged[Cdecl]<int,bool>) ALC.GetProcAddress(device, "alIsEnabled");
		alGetString = (delegate *unmanaged[Cdecl]<int,byte*>) ALC.GetProcAddress(device, "alGetString");
		alGetBooleanv = (delegate *unmanaged[Cdecl]<int,bool*,void>) ALC.GetProcAddress(device, "alGetBooleanv");
		alGetIntegerv = (delegate *unmanaged[Cdecl]<int,int*,void>) ALC.GetProcAddress(device, "alGetIntegerv");
		alGetFloatv = (delegate *unmanaged[Cdecl]<int,float*,void>) ALC.GetProcAddress(device, "alGetFloatv");
		alGetDoublev = (delegate *unmanaged[Cdecl]<int,double*,void>) ALC.GetProcAddress(device, "alGetDoublev");
		alGetBoolean = (delegate *unmanaged[Cdecl]<int,bool>) ALC.GetProcAddress(device, "alGetBoolean");
		alGetInteger = (delegate *unmanaged[Cdecl]<int,int>) ALC.GetProcAddress(device, "alGetInteger");
		alGetFloat = (delegate *unmanaged[Cdecl]<int,float>) ALC.GetProcAddress(device, "alGetFloat");
		alGetDouble = (delegate *unmanaged[Cdecl]<int,double>) ALC.GetProcAddress(device, "alGetDouble");
		alGetError = (delegate *unmanaged[Cdecl]<Error>) ALC.GetProcAddress(device, "alGetError");
		alIsExtensionPresent = (delegate *unmanaged[Cdecl]<byte*,bool>) ALC.GetProcAddress(device, "alIsExtensionPresent");
		alGetProcAddress = (delegate *unmanaged[Cdecl]<byte*,void*>) ALC.GetProcAddress(device, "alGetProcAddress");
		alGetEnumValue = (delegate *unmanaged[Cdecl]<byte*,int>) ALC.GetProcAddress(device, "alGetEnumValue");
		alListenerf = (delegate *unmanaged[Cdecl]<ListenerProperty,float,void>) ALC.GetProcAddress(device, "alListenerf");
		alListener3f = (delegate *unmanaged[Cdecl]<ListenerProperty,float,float,float,void>) ALC.GetProcAddress(device, "alListener3f");
		alListenerfv = (delegate *unmanaged[Cdecl]<ListenerProperty,float*,void>) ALC.GetProcAddress(device, "alListenerfv");
		alListeneri = (delegate *unmanaged[Cdecl]<ListenerProperty,int,void>) ALC.GetProcAddress(device, "alListeneri");
		alListener3i = (delegate *unmanaged[Cdecl]<ListenerProperty,int,int,int,void>) ALC.GetProcAddress(device, "alListener3i");
		alListeneriv = (delegate *unmanaged[Cdecl]<ListenerProperty,int*,void>) ALC.GetProcAddress(device, "alListeneriv");
		alGetListenerf = (delegate *unmanaged[Cdecl]<ListenerProperty,float*,void>) ALC.GetProcAddress(device, "alGetListenerf");
		alGetListener3f = (delegate *unmanaged[Cdecl]<ListenerProperty,float*,float*,float*,void>) ALC.GetProcAddress(device, "alGetListener3f");
		alGetListenerfv = (delegate *unmanaged[Cdecl]<ListenerProperty,float*,void>) ALC.GetProcAddress(device, "alGetListenerfv");
		alGetListeneri = (delegate *unmanaged[Cdecl]<ListenerProperty,int*,void>) ALC.GetProcAddress(device, "alGetListeneri");
		alGetListener3i = (delegate *unmanaged[Cdecl]<ListenerProperty,int*,int*,int*,void>) ALC.GetProcAddress(device, "alGetListener3i");
		alGetListeneriv = (delegate *unmanaged[Cdecl]<ListenerProperty,int*,void>) ALC.GetProcAddress(device, "alGetListeneriv");
		alGenSources = (delegate *unmanaged[Cdecl]<int,Source*,void>) ALC.GetProcAddress(device, "alGenSources");
		alDeleteSources = (delegate *unmanaged[Cdecl]<int,Source*,void>) ALC.GetProcAddress(device, "alDeleteSources");
		alIsSource = (delegate *unmanaged[Cdecl]<Source,bool>) ALC.GetProcAddress(device, "alIsSource");
		alSourcef = (delegate *unmanaged[Cdecl]<Source,SourceProperty,float,void>) ALC.GetProcAddress(device, "alSourcef");
		alSource3f = (delegate *unmanaged[Cdecl]<Source,SourceProperty,float,float,float,void>) ALC.GetProcAddress(device, "alSource3f");
		alSourcefv = (delegate *unmanaged[Cdecl]<Source,SourceProperty,float*,void>) ALC.GetProcAddress(device, "alSourcefv");
		alSourcei = (delegate *unmanaged[Cdecl]<Source,SourceProperty,int,void>) ALC.GetProcAddress(device, "alSourcei");
		alSource3i = (delegate *unmanaged[Cdecl]<Source,SourceProperty,int,int,int,void>) ALC.GetProcAddress(device, "alSource3i");
		alSourceiv = (delegate *unmanaged[Cdecl]<Source,SourceProperty,int*,void>) ALC.GetProcAddress(device, "alSourceiv");
		alGetSourcef = (delegate *unmanaged[Cdecl]<Source,SourceProperty,float*,void>) ALC.GetProcAddress(device, "alGetSourcef");
		alGetSource3f = (delegate *unmanaged[Cdecl]<Source,SourceProperty,float*,float*,float*,void>) ALC.GetProcAddress(device, "alGetSource3f");
		alGetSourcefv = (delegate *unmanaged[Cdecl]<Source,SourceProperty,float*,void>) ALC.GetProcAddress(device, "alGetSourcefv");
		alGetSourcei = (delegate *unmanaged[Cdecl]<Source,SourceProperty,int*,void>) ALC.GetProcAddress(device, "alGetSourcei");
		alGetSource3i = (delegate *unmanaged[Cdecl]<Source,SourceProperty,int*,int*,int*,void>) ALC.GetProcAddress(device, "alGetSource3i");
		alGetSourceiv = (delegate *unmanaged[Cdecl]<Source,SourceProperty,int*,void>) ALC.GetProcAddress(device, "alGetSourceiv");
		alSourcePlayv = (delegate *unmanaged[Cdecl]<int,Source*,void>) ALC.GetProcAddress(device, "alSourcePlayv");
		alSourceStopv = (delegate *unmanaged[Cdecl]<int,Source*,void>) ALC.GetProcAddress(device, "alSourceStopv");
		alSourceRewindv = (delegate *unmanaged[Cdecl]<int,Source*,void>) ALC.GetProcAddress(device, "alSourceRewindv");
		alSourcePausev = (delegate *unmanaged[Cdecl]<int,Source*,void>) ALC.GetProcAddress(device, "alSourcePausev");
		alSourcePlay = (delegate *unmanaged[Cdecl]<Source,void>) ALC.GetProcAddress(device, "alSourcePlay");
		alSourceStop = (delegate *unmanaged[Cdecl]<Source,void>) ALC.GetProcAddress(device, "alSourceStop");
		alSourceRewind = (delegate *unmanaged[Cdecl]<Source,void>) ALC.GetProcAddress(device, "alSourceRewind");
		alSourcePause = (delegate *unmanaged[Cdecl]<Source,void>) ALC.GetProcAddress(device, "alSourcePause");
		alSourceQueueBuffers = (delegate *unmanaged[Cdecl]<Source,int,Buffer*,void>) ALC.GetProcAddress(device, "alSourceQueueBuffers");
		alSourceUnqueueBuffers = (delegate *unmanaged[Cdecl]<Source,int,Buffer*,void>) ALC.GetProcAddress(device, "alSourceUnqueueBuffers");
		alGenBuffers = (delegate *unmanaged[Cdecl]<int,Buffer*,void>) ALC.GetProcAddress(device, "alGenBuffers");
		alDeleteBuffers = (delegate *unmanaged[Cdecl]<int,Buffer*,void>) ALC.GetProcAddress(device, "alDeleteBuffers");
		alIsBuffer = (delegate *unmanaged[Cdecl]<Buffer,bool>) ALC.GetProcAddress(device, "alIsBuffer");
		alBufferData = (delegate *unmanaged[Cdecl]<Buffer,AudioFormat,void*,int,int,void>) ALC.GetProcAddress(device, "alBufferData");
		alBufferf = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float,void>) ALC.GetProcAddress(device, "alBufferf");
		alBuffer3f = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float,float,float,void>) ALC.GetProcAddress(device, "alBuffer3f");
		alBufferfv = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float*,void>) ALC.GetProcAddress(device, "alBufferfv");
		alBufferi = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int,void>) ALC.GetProcAddress(device, "alBufferi");
		alBuffer3i = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int,int,int,void>) ALC.GetProcAddress(device, "alBuffer3i");
		alBufferiv = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int*,void>) ALC.GetProcAddress(device, "alBufferiv");
		alGetBufferf = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float*,void>) ALC.GetProcAddress(device, "alGetBufferf");
		alGetBuffer3f = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float*,float*,float*,void>) ALC.GetProcAddress(device, "alGetBuffer3f");
		alGetBufferfv = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,float*,void>) ALC.GetProcAddress(device, "alGetBufferfv");
		alGetBufferi = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int*,void>) ALC.GetProcAddress(device, "alGetBufferi");
		alGetBuffer3i = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int*,int*,int*,void>) ALC.GetProcAddress(device, "alGetBuffer3i");
		alGetBufferiv = (delegate *unmanaged[Cdecl]<Buffer,BufferProperty,int*,void>) ALC.GetProcAddress(device, "alGetBufferiv");
		alBufferDataStatic = (delegate *unmanaged[Cdecl]<Buffer,AudioFormat,void*,int,int,void>) ALC.GetProcAddress(device, "alBufferDataStatic");
		alBufferSubDataSOFT = (delegate *unmanaged[Cdecl]<Buffer,AudioFormat,void*,int,int,void>) ALC.GetProcAddress(device, "alBufferSubDataSOFT");
		alRequestFoldbackStart = (delegate *unmanaged[Cdecl]<FoldbackMode,int,int,float*,FoldbackCallback,void>) ALC.GetProcAddress(device, "alRequestFoldbackStart");
		alRequestFoldbackStop = (delegate *unmanaged[Cdecl]<void>) ALC.GetProcAddress(device, "alRequestFoldbackStop");
		alBufferSamplesSOFT = (delegate *unmanaged[Cdecl]<Buffer,int,BufferFormat,int,BufferChannels,SampleType,void*,void>) ALC.GetProcAddress(device, "alBufferSamplesSOFT");
		alBufferSubSamplesSOFT = (delegate *unmanaged[Cdecl]<Buffer,int,int,BufferChannels,SampleType,void*,void>) ALC.GetProcAddress(device, "alBufferSubSamplesSOFT");
		alGetBufferSamplesSOFT = (delegate *unmanaged[Cdecl]<Buffer,int,int,BufferChannels,SampleType,void*,void>) ALC.GetProcAddress(device, "alGetBufferSamplesSOFT");
		alIsBufferFormatSupportedSOFT = (delegate *unmanaged[Cdecl]<BufferFormat,bool>) ALC.GetProcAddress(device, "alIsBufferFormatSupportedSOFT");
		alSourcedSOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,double,void>) ALC.GetProcAddress(device, "alSourcedSOFT");
		alSource3dSOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,double,double,double,void>) ALC.GetProcAddress(device, "alSource3dSOFT");
		alSourcedvSOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,double*,void>) ALC.GetProcAddress(device, "alSourcedvSOFT");
		alGetSourcedSOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,double*,void>) ALC.GetProcAddress(device, "alGetSourcedSOFT");
		alGetSource3dSOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,double*,double*,double*,void>) ALC.GetProcAddress(device, "alGetSource3dSOFT");
		alGetSourcedvSOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,double*,void>) ALC.GetProcAddress(device, "alGetSourcedvSOFT");
		alSourcei64SOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,long,void>) ALC.GetProcAddress(device, "alSourcei64SOFT");
		alSource3i64SOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,long,long,long,void>) ALC.GetProcAddress(device, "alSource3i64SOFT");
		alSourcei64vSOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,long*,void>) ALC.GetProcAddress(device, "alSourcei64vSOFT");
		alGetSourcei64SOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,long*,void>) ALC.GetProcAddress(device, "alGetSourcei64SOFT");
		alGetSource3i64SOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,long*,long*,long*,void>) ALC.GetProcAddress(device, "alGetSource3i64SOFT");
		alGetSourcei64vSOFT = (delegate *unmanaged[Cdecl]<Source,SourceProperty,long*,void>) ALC.GetProcAddress(device, "alGetSourcei64vSOFT");
		alDeferUpdatesSOFT = (delegate *unmanaged[Cdecl]<void>) ALC.GetProcAddress(device, "alDeferUpdatesSOFT");
		alProcessUpdatesSOFT = (delegate *unmanaged[Cdecl]<void>) ALC.GetProcAddress(device, "alProcessUpdatesSOFT");
		alGetStringiSOFT = (delegate *unmanaged[Cdecl]<int,int,byte*>) ALC.GetProcAddress(device, "alGetStringiSOFT");
		alEventControlSOFT = (delegate *unmanaged[Cdecl]<int,EventType*,bool,void>) ALC.GetProcAddress(device, "alEventControlSOFT");
		alEventCallbackSOFT = (delegate *unmanaged[Cdecl]<EventProc,IntPtr,void>) ALC.GetProcAddress(device, "alEventCallbackSOFT");
		// alGetPointerSOFT = (delegate *unmanaged[Cdecl]<int,IntPtr>) ALC.GetProcAddress(device, "alGetPointerSOFT");
		// alGetPointervSOFT = (delegate *unmanaged[Cdecl]<int,void**,void>) ALC.GetProcAddress(device, "alGetPointervSOFT");
		alBufferCallbackSOFT = (delegate *unmanaged[Cdecl]<Buffer,int,int,BufferCallbackHandler,IntPtr,void>) ALC.GetProcAddress(device, "alBufferCallbackSOFT");
		alGetBufferPtrSOFT = (delegate *unmanaged[Cdecl]<Buffer,int,void**,void>) ALC.GetProcAddress(device, "alGetBufferPtrSOFT");
		alGetBuffer3PtrSOFT = (delegate *unmanaged[Cdecl]<Buffer,int,void**,void**,void**,void>) ALC.GetProcAddress(device, "alGetBuffer3PtrSOFT");
		alGetBufferPtrvSOFT = (delegate *unmanaged[Cdecl]<Buffer,int,void**,void>) ALC.GetProcAddress(device, "alGetBufferPtrvSOFT");
		alGenEffects = (delegate *unmanaged[Cdecl]<int,Effect*,void>) ALC.GetProcAddress(device, "alGenEffects");
		alDeleteEffects = (delegate *unmanaged[Cdecl]<int,Effect*,void>) ALC.GetProcAddress(device, "alDeleteEffects");
		alIsEffect = (delegate *unmanaged[Cdecl]<Effect,bool>) ALC.GetProcAddress(device, "alIsEffect");
		alEffecti = (delegate *unmanaged[Cdecl]<Effect,EffectProperty,int,void>) ALC.GetProcAddress(device, "alEffecti");
		alEffectiv = (delegate *unmanaged[Cdecl]<Effect,EffectProperty,int*,void>) ALC.GetProcAddress(device, "alEffectiv");
		alEffectf = (delegate *unmanaged[Cdecl]<Effect,EffectProperty,float,void>) ALC.GetProcAddress(device, "alEffectf");
		alEffectfv = (delegate *unmanaged[Cdecl]<Effect,EffectProperty,float*,void>) ALC.GetProcAddress(device, "alEffectfv");
		alGetEffecti = (delegate *unmanaged[Cdecl]<Effect,EffectProperty,int*,void>) ALC.GetProcAddress(device, "alGetEffecti");
		alGetEffectiv = (delegate *unmanaged[Cdecl]<Effect,EffectProperty,int*,void>) ALC.GetProcAddress(device, "alGetEffectiv");
		alGetEffectf = (delegate *unmanaged[Cdecl]<Effect,EffectProperty,float*,void>) ALC.GetProcAddress(device, "alGetEffectf");
		alGetEffectfv = (delegate *unmanaged[Cdecl]<Effect,EffectProperty,float*,void>) ALC.GetProcAddress(device, "alGetEffectfv");
		alEffectiReverb = (delegate *unmanaged[Cdecl]<Effect,ReverbParam,int,void>) ALC.GetProcAddress(device, "alEffecti");
		alEffectfReverb = (delegate *unmanaged[Cdecl]<Effect,ReverbParam,float,void>) ALC.GetProcAddress(device, "alEffectf");
		alEffectiEaxReverb = (delegate *unmanaged[Cdecl]<Effect,EaxReverbParam,int,void>) ALC.GetProcAddress(device, "alEffecti");
		alEffectfEaxReverb = (delegate *unmanaged[Cdecl]<Effect,EaxReverbParam,float,void>) ALC.GetProcAddress(device, "alEffectf");
		alEffectfvEaxReverb = (delegate *unmanaged[Cdecl]<Effect,EaxReverbParam,float*,void>) ALC.GetProcAddress(device, "alEffectfv");
		alGenFilters = (delegate *unmanaged[Cdecl]<int,Filter*,void>) ALC.GetProcAddress(device, "alGenFilters");
		alDeleteFilters = (delegate *unmanaged[Cdecl]<int,Filter*,void>) ALC.GetProcAddress(device, "alDeleteFilters");
		alIsFilter = (delegate *unmanaged[Cdecl]<Filter,bool>) ALC.GetProcAddress(device, "alIsFilter");
		alFilteri = (delegate *unmanaged[Cdecl]<Filter,FilterProperty,int,void>) ALC.GetProcAddress(device, "alFilteri");
		alFilteriv = (delegate *unmanaged[Cdecl]<Filter,FilterProperty,int*,void>) ALC.GetProcAddress(device, "alFilteriv");
		alFilterf = (delegate *unmanaged[Cdecl]<Filter,FilterProperty,float,void>) ALC.GetProcAddress(device, "alFilterf");
		alFilterfv = (delegate *unmanaged[Cdecl]<Filter,FilterProperty,float*,void>) ALC.GetProcAddress(device, "alFilterfv");
		alGetFilteri = (delegate *unmanaged[Cdecl]<Filter,FilterProperty,int*,void>) ALC.GetProcAddress(device, "alGetFilteri");
		alGetFilteriv = (delegate *unmanaged[Cdecl]<Filter,FilterProperty,int*,void>) ALC.GetProcAddress(device, "alGetFilteriv");
		alGetFilterf = (delegate *unmanaged[Cdecl]<Filter,FilterProperty,float*,void>) ALC.GetProcAddress(device, "alGetFilterf");
		alGetFilterfv = (delegate *unmanaged[Cdecl]<Filter,FilterProperty,float*,void>) ALC.GetProcAddress(device, "alGetFilterfv");
		alGenAuxiliaryEffectSlots = (delegate *unmanaged[Cdecl]<int,EffectSlot*,void>) ALC.GetProcAddress(device, "alGenAuxiliaryEffectSlots");
		alDeleteAuxiliaryEffectSlots = (delegate *unmanaged[Cdecl]<int,EffectSlot*,void>) ALC.GetProcAddress(device, "alDeleteAuxiliaryEffectSlots");
		alIsAuxiliaryEffectSlot = (delegate *unmanaged[Cdecl]<EffectSlot,bool>) ALC.GetProcAddress(device, "alIsAuxiliaryEffectSlot");
		alAuxiliaryEffectSloti = (delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,int,void>) ALC.GetProcAddress(device, "alAuxiliaryEffectSloti");
		alAuxiliaryEffectSlotiv = (delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,int*,void>) ALC.GetProcAddress(device, "alAuxiliaryEffectSlotiv");
		alAuxiliaryEffectSlotf = (delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,float,void>) ALC.GetProcAddress(device, "alAuxiliaryEffectSlotf");
		alAuxiliaryEffectSlotfv = (delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,float*,void>) ALC.GetProcAddress(device, "alAuxiliaryEffectSlotfv");
		alGetAuxiliaryEffectSloti = (delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,int*,void>) ALC.GetProcAddress(device, "alGetAuxiliaryEffectSloti");
		alGetAuxiliaryEffectSlotiv = (delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,int*,void>) ALC.GetProcAddress(device, "alGetAuxiliaryEffectSlotiv");
		alGetAuxiliaryEffectSlotf = (delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,float*,void>) ALC.GetProcAddress(device, "alGetAuxiliaryEffectSlotf");
		alGetAuxiliaryEffectSlotfv = (delegate *unmanaged[Cdecl]<EffectSlot,EffectSlotProperty,float*,void>) ALC.GetProcAddress(device, "alGetAuxiliaryEffectSlotfv");
	}
	

	public const string EXT_FOLDBACK_NAME = "AL_EXT_FOLDBACK";






	
	public const int NONE = 0;
	public const int FALSE = 0;
	public const int TRUE = 1;

	
	public const int FREQUENCY = 0x2001;
	public const int BITS = 0x2002;
	public const int CHANNELS = 0x2003;
	public const int SIZE = 0x2004;
	public const int UNUSED = 0x2010;
	public const int PENDING = 0x2011;
	public const int PROCESSED = 0x2012;
	public const int VENDOR = 0xB001;
	public const int VERSION = 0xB002;
	public const int RENDERER = 0xB003;
	public const int EXTENSIONS = 0xB004;
	public const int DOPPLER_FACTOR = 0xC000;
	public const int DOPPLER_VELOCITY = 0xC001;
	public const int SPEED_OF_SOUND = 0xC003;
	public const int DISTANCE_MODEL = 0xD000;
	
	public const int BYTE_RW_OFFSETS = 0x1031;
	public const int SAMPLE_RW_OFFSETS = 0x1032;
	public const int LOOP_POINTS = 0x2015;

	public const int DEDICATED_GAIN = 0x0001;
	public const int EFFECT_DEDICATED_DIALOGUE = 0x9001;
	public const int EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT = 0x9000;
	public const int MONO = 0x1500;
	public const int STEREO = 0x1501;
	public const int REAR = 0x1502;
	public const int QUAD = 0x1503;
	public const int FIVE_POINT_ONE = 0x1504;
	public const int SIX_POINT_ONE = 0x1505;
	public const int SEVEN_POINT_ONE = 0x1506;
	public const int BYTE = 0x1400;
	public const int UNSIGNED_BYTE = 0x1401;
	public const int SHORT = 0x1402;
	public const int UNSIGNED_SHORT = 0x1403;
	public const int INT = 0x1404;
	public const int UNSIGNED_INT = 0x1405;
	public const int FLOAT = 0x1406;
	public const int DOUBLE = 0x1407;
	public const int BYTE3 = 0x1408;
	public const int UNSIGNED_BYTE3 = 0x1409;
	public const int MONO8 = 0x1100;
	public const int MONO16 = 0x1101;
	public const int MONO32F = 0x10010;
	public const int STEREO8 = 0x1102;
	public const int STEREO16 = 0x1103;
	public const int STEREO32F = 0x10011;
	public const int QUAD8 = 0x1204;
	public const int QUAD16 = 0x1205;
	public const int QUAD32F = 0x1206;
	public const int REAR8 = 0x1207;
	public const int REAR16 = 0x1208;
	public const int REAR32F = 0x1209;
	public const int FIVE_POINT_ONE_8 = 0x120A;
	public const int FIVE_POINT_ONE_16 = 0x120B;
	public const int FIVE_POINT_ONE_32F = 0x120C;
	public const int SIX_POINT_ONE_8 = 0x120D;
	public const int SIX_POINT_ONE_16 = 0x120E;
	public const int SIX_POINT_ONE_32F = 0x120F;
	public const int SEVEN_POINT_ONE_8 = 0x1210;
	public const int SEVEN_POINT_ONE_16 = 0x1211;
	public const int SEVEN_POINT_ONE_32F = 0x1212;
	public const int INTERNAL_FORMAT = 0x2008;
	public const int BYTE_LENGTH = 0x2009;
	public const int SAMPLE_LENGTH = 0x200A;
	public const int SEC_LENGTH = 0x200B;
	public const int DIRECT_CHANNELS = 0x1033;
	public const int STEREO_ANGLES = 0x1030;
	public const int SOURCE_RADIUS = 0x1031;
	public const int SAMPLE_OFFSET_LATENCY = 0x1200;
	public const int SEC_OFFSET_LATENCY = 0x1201;
	public const int DEFERRED_UPDATES = 0xC002;
	public const int UNPACK_BLOCK_ALIGNMENT = 0x200C;
	public const int PACK_BLOCK_ALIGNMENT = 0x200D;
	public const int FORMAT_MONO_MSADPCM = 0x1302;
	public const int FORMAT_STEREO_MSADPCM = 0x1303;
	public const int FORMAT_BFORMAT2D_8 = 0x20021;
	public const int FORMAT_BFORMAT2D_16 = 0x20022;
	public const int FORMAT_BFORMAT2D_FLOAT32 = 0x20023;
	public const int FORMAT_BFORMAT3D_8 = 0x20031;
	public const int FORMAT_BFORMAT3D_16 = 0x20032;
	public const int FORMAT_BFORMAT3D_FLOAT32 = 0x20033;
	public const int FORMAT_BFORMAT2D_MULAW = 0x10031;
	public const int FORMAT_BFORMAT3D_MULAW = 0x10032;
	public const int GAIN_LIMIT = 0x200E;
	public const int NUM_RESAMPLERS = 0x1210;
	public const int DEFAULT_RESAMPLER = 0x1211;
	public const int SOURCE_RESAMPLER = 0x1212;
	public const int RESAMPLER_NAME = 0x1213;
	
	
	public const int AUTO = 0x0002;
	public const int SAMPLE_OFFSET_CLOCK = 0x1202;
	public const int SEC_OFFSET_CLOCK = 0x1203;
	public const int DROP_UNMATCHED = 0x0001;
	public const int REMIX_UNMATCHED = 0x0002;
	public const int AMBISONIC_LAYOUT = 0x1997;
	public const int AMBISONIC_SCALING = 0x1998;
	public const int FUMA = 0x0000;
	public const int ACN = 0x0001;
	public const int SN3D = 0x0001;
	public const int N3D = 0x0002;
	public const int EFFECTSLOT_TARGET = 0x199C;
	public const int EVENT_CALLBACK_FUNCTION = 0x19A2;
	public const int EVENT_CALLBACK_USER_PARAM = 0x19A3;
	public const int EVENT_TYPE_BUFFER_COMPLETED = 0x19A4;
	public const int EVENT_TYPE_SOURCE_STATE_CHANGED = 0x19A5;
	public const int EVENT_TYPE_DISCONNECTED = 0x19A6;
	public const int BUFFER_CALLBACK_FUNCTION = 0x19A0;
	public const int BUFFER_CALLBACK_USER_PARAM = 0x19A1;
	

	public const int REVERB_DENSITY = 0x0001;
	public const int REVERB_DIFFUSION = 0x0002;
	public const int REVERB_GAIN = 0x0003;
	public const int REVERB_GAINHF = 0x0004;
	public const int REVERB_DECAY_TIME = 0x0005;
	public const int REVERB_DECAY_HFRATIO = 0x0006;
	public const int REVERB_REFLECTIONS_GAIN = 0x0007;
	public const int REVERB_REFLECTIONS_DELAY = 0x0008;
	public const int REVERB_LATE_REVERB_GAIN = 0x0009;
	public const int REVERB_LATE_REVERB_DELAY = 0x000A;
	public const int REVERB_AIR_ABSORPTION_GAINHF = 0x000B;
	public const int REVERB_ROOM_ROLLOFF_FACTOR = 0x000C;
	public const int REVERB_DECAY_HFLIMIT = 0x000D;
	public const int EAXREVERB_DENSITY = 0x0001;
	public const int EAXREVERB_DIFFUSION = 0x0002;
	public const int EAXREVERB_GAIN = 0x0003;
	public const int EAXREVERB_GAINHF = 0x0004;
	public const int EAXREVERB_GAINLF = 0x0005;
	public const int EAXREVERB_DECAY_TIME = 0x0006;
	public const int EAXREVERB_DECAY_HFRATIO = 0x0007;
	public const int EAXREVERB_DECAY_LFRATIO = 0x0008;
	public const int EAXREVERB_REFLECTIONS_GAIN = 0x0009;
	public const int EAXREVERB_REFLECTIONS_DELAY = 0x000A;
	public const int EAXREVERB_REFLECTIONS_PAN = 0x000B;
	public const int EAXREVERB_LATE_REVERB_GAIN = 0x000C;
	public const int EAXREVERB_LATE_REVERB_DELAY = 0x000D;
	public const int EAXREVERB_LATE_REVERB_PAN = 0x000E;
	public const int EAXREVERB_ECHO_TIME = 0x000F;
	public const int EAXREVERB_ECHO_DEPTH = 0x0010;
	public const int EAXREVERB_MODULATION_TIME = 0x0011;
	public const int EAXREVERB_MODULATION_DEPTH = 0x0012;
	public const int EAXREVERB_AIR_ABSORPTION_GAINHF = 0x0013;
	public const int EAXREVERB_HFREFERENCE = 0x0014;
	public const int EAXREVERB_LFREFERENCE = 0x0015;
	public const int EAXREVERB_ROOM_ROLLOFF_FACTOR = 0x0016;
	public const int EAXREVERB_DECAY_HFLIMIT = 0x0017;
	public const int CHORUS_WAVEFORM = 0x0001;
	public const int CHORUS_PHASE = 0x0002;
	public const int CHORUS_RATE = 0x0003;
	public const int CHORUS_DEPTH = 0x0004;
	public const int CHORUS_FEEDBACK = 0x0005;
	public const int CHORUS_DELAY = 0x0006;
	public const int DISTORTION_EDGE = 0x0001;
	public const int DISTORTION_GAIN = 0x0002;
	public const int DISTORTION_LOWPASS_CUTOFF = 0x0003;
	public const int DISTORTION_EQCENTER = 0x0004;
	public const int DISTORTION_EQBANDWIDTH = 0x0005;
	public const int ECHO_DELAY = 0x0001;
	public const int ECHO_LRDELAY = 0x0002;
	public const int ECHO_DAMPING = 0x0003;
	public const int ECHO_FEEDBACK = 0x0004;
	public const int ECHO_SPREAD = 0x0005;
	public const int FLANGER_WAVEFORM = 0x0001;
	public const int FLANGER_PHASE = 0x0002;
	public const int FLANGER_RATE = 0x0003;
	public const int FLANGER_DEPTH = 0x0004;
	public const int FLANGER_FEEDBACK = 0x0005;
	public const int FLANGER_DELAY = 0x0006;
	public const int FREQUENCY_SHIFTER_FREQUENCY = 0x0001;
	public const int FREQUENCY_SHIFTER_LEFT_DIRECTION = 0x0002;
	public const int FREQUENCY_SHIFTER_RIGHT_DIRECTION = 0x0003;
	public const int VOCAL_MORPHER_PHONEMEA = 0x0001;
	public const int VOCAL_MORPHER_PHONEMEA_COARSE_TUNING = 0x0002;
	public const int VOCAL_MORPHER_PHONEMEB = 0x0003;
	public const int VOCAL_MORPHER_PHONEMEB_COARSE_TUNING = 0x0004;
	public const int VOCAL_MORPHER_WAVEFORM = 0x0005;
	public const int VOCAL_MORPHER_RATE = 0x0006;
	public const int PITCH_SHIFTER_COARSE_TUNE = 0x0001;
	public const int PITCH_SHIFTER_FINE_TUNE = 0x0002;
	public const int RING_MODULATOR_FREQUENCY = 0x0001;
	public const int RING_MODULATOR_HIGHPASS_CUTOFF = 0x0002;
	public const int RING_MODULATOR_WAVEFORM = 0x0003;
	public const int AUTOWAH_ATTACK_TIME = 0x0001;
	public const int AUTOWAH_RELEASE_TIME = 0x0002;
	public const int AUTOWAH_RESONANCE = 0x0003;
	public const int AUTOWAH_PEAK_GAIN = 0x0004;
	public const int COMPRESSOR_ONOFF = 0x0001;
	public const int EQUALIZER_LOW_GAIN = 0x0001;
	public const int EQUALIZER_LOW_CUTOFF = 0x0002;
	public const int EQUALIZER_MID1_GAIN = 0x0003;
	public const int EQUALIZER_MID1_CENTER = 0x0004;
	public const int EQUALIZER_MID1_WIDTH = 0x0005;
	public const int EQUALIZER_MID2_GAIN = 0x0006;
	public const int EQUALIZER_MID2_CENTER = 0x0007;
	public const int EQUALIZER_MID2_WIDTH = 0x0008;
	public const int EQUALIZER_HIGH_GAIN = 0x0009;
	public const int EQUALIZER_HIGH_CUTOFF = 0x000A;
	public const int EFFECT_FIRST_PARAMETER = 0x0000;
	public const int EFFECT_LAST_PARAMETER = 0x8000;
	public const int EFFECT_TYPE = 0x8001;
	public const int EFFECT_NULL = 0x0000;
	public const int EFFECT_REVERB = 0x0001;
	public const int EFFECT_CHORUS = 0x0002;
	public const int EFFECT_DISTORTION = 0x0003;
	public const int EFFECT_ECHO = 0x0004;
	public const int EFFECT_FLANGER = 0x0005;
	public const int EFFECT_FREQUENCY_SHIFTER = 0x0006;
	public const int EFFECT_VOCAL_MORPHER = 0x0007;
	public const int EFFECT_PITCH_SHIFTER = 0x0008;
	public const int EFFECT_RING_MODULATOR = 0x0009;
	public const int EFFECT_AUTOWAH = 0x000A;
	public const int EFFECT_COMPRESSOR = 0x000B;
	public const int EFFECT_EQUALIZER = 0x000C;
	public const int EFFECT_EAXREVERB = 0x8000;
	public const int EFFECTSLOT_EFFECT = 0x0001;
	public const int EFFECTSLOT_GAIN = 0x0002;
	public const int EFFECTSLOT_AUXILIARY_SEND_AUTO = 0x0003;
	public const int EFFECTSLOT_NULL = 0x0000;
	public const int LOWPASS_GAIN = 0x0001;
	public const int LOWPASS_GAINHF = 0x0002;
	public const int HIGHPASS_GAIN = 0x0001;
	public const int HIGHPASS_GAINLF = 0x0002;
	public const int BANDPASS_GAIN = 0x0001;
	public const int BANDPASS_GAINLF = 0x0002;
	public const int BANDPASS_GAINHF = 0x0003;
	public const int FILTER_FIRST_PARAMETER = 0x0000;
	public const int FILTER_LAST_PARAMETER = 0x8000;
	public const int FILTER_TYPE = 0x8001;
	public const int FILTER_NULL = 0x0000;
	public const int FILTER_LOWPASS = 0x0001;
	public const int FILTER_HIGHPASS = 0x0002;
	public const int FILTER_BANDPASS = 0x0003;
	public const float LOWPASS_MIN_GAIN = (0.0f);
	public const float LOWPASS_MAX_GAIN = (1.0f);
	public const float LOWPASS_DEFAULT_GAIN = (1.0f);
	public const float LOWPASS_MIN_GAINHF = (0.0f);
	public const float LOWPASS_MAX_GAINHF = (1.0f);
	public const float LOWPASS_DEFAULT_GAINHF = (1.0f);
	public const float HIGHPASS_MIN_GAIN = (0.0f);
	public const float HIGHPASS_MAX_GAIN = (1.0f);
	public const float HIGHPASS_DEFAULT_GAIN = (1.0f);
	public const float HIGHPASS_MIN_GAINLF = (0.0f);
	public const float HIGHPASS_MAX_GAINLF = (1.0f);
	public const float HIGHPASS_DEFAULT_GAINLF = (1.0f);
	public const float BANDPASS_MIN_GAIN = (0.0f);
	public const float BANDPASS_MAX_GAIN = (1.0f);
	public const float BANDPASS_DEFAULT_GAIN = (1.0f);
	public const float BANDPASS_MIN_GAINHF = (0.0f);
	public const float BANDPASS_MAX_GAINHF = (1.0f);
	public const float BANDPASS_DEFAULT_GAINHF = (1.0f);
	public const float BANDPASS_MIN_GAINLF = (0.0f);
	public const float BANDPASS_MAX_GAINLF = (1.0f);
	public const float BANDPASS_DEFAULT_GAINLF = (1.0f);
	public const float REVERB_MIN_DENSITY = (0.0f);
	public const float REVERB_MAX_DENSITY = (1.0f);
	public const float REVERB_DEFAULT_DENSITY = (1.0f);
	public const float REVERB_MIN_DIFFUSION = (0.0f);
	public const float REVERB_MAX_DIFFUSION = (1.0f);
	public const float REVERB_DEFAULT_DIFFUSION = (1.0f);
	public const float REVERB_MIN_GAIN = (0.0f);
	public const float REVERB_MAX_GAIN = (1.0f);
	public const float REVERB_DEFAULT_GAIN = (0.32f);
	public const float REVERB_MIN_GAINHF = (0.0f);
	public const float REVERB_MAX_GAINHF = (1.0f);
	public const float REVERB_DEFAULT_GAINHF = (0.89f);
	public const float REVERB_MIN_DECAY_TIME = (0.1f);
	public const float REVERB_MAX_DECAY_TIME = (20.0f);
	public const float REVERB_DEFAULT_DECAY_TIME = (1.49f);
	public const float REVERB_MIN_DECAY_HFRATIO = (0.1f);
	public const float REVERB_MAX_DECAY_HFRATIO = (2.0f);
	public const float REVERB_DEFAULT_DECAY_HFRATIO = (0.83f);
	public const float REVERB_MIN_REFLECTIONS_GAIN = (0.0f);
	public const float REVERB_MAX_REFLECTIONS_GAIN = (3.16f);
	public const float REVERB_DEFAULT_REFLECTIONS_GAIN = (0.05f);
	public const float REVERB_MIN_REFLECTIONS_DELAY = (0.0f);
	public const float REVERB_MAX_REFLECTIONS_DELAY = (0.3f);
	public const float REVERB_DEFAULT_REFLECTIONS_DELAY = (0.007f);
	public const float REVERB_MIN_LATE_REVERB_GAIN = (0.0f);
	public const float REVERB_MAX_LATE_REVERB_GAIN = (10.0f);
	public const float REVERB_DEFAULT_LATE_REVERB_GAIN = (1.26f);
	public const float REVERB_MIN_LATE_REVERB_DELAY = (0.0f);
	public const float REVERB_MAX_LATE_REVERB_DELAY = (0.1f);
	public const float REVERB_DEFAULT_LATE_REVERB_DELAY = (0.011f);
	public const float REVERB_MIN_AIR_ABSORPTION_GAINHF = (0.892f);
	public const float REVERB_MAX_AIR_ABSORPTION_GAINHF = (1.0f);
	public const float REVERB_DEFAULT_AIR_ABSORPTION_GAINHF = (0.994f);
	public const float REVERB_MIN_ROOM_ROLLOFF_FACTOR = (0.0f);
	public const float REVERB_MAX_ROOM_ROLLOFF_FACTOR = (10.0f);
	public const float REVERB_DEFAULT_ROOM_ROLLOFF_FACTOR = (0.0f);
	public const int REVERB_MIN_DECAY_HFLIMIT = FALSE;
	public const int REVERB_MAX_DECAY_HFLIMIT = TRUE;
	public const int REVERB_DEFAULT_DECAY_HFLIMIT = TRUE;
	public const float EAXREVERB_MIN_DENSITY = (0.0f);
	public const float EAXREVERB_MAX_DENSITY = (1.0f);
	public const float EAXREVERB_DEFAULT_DENSITY = (1.0f);
	public const float EAXREVERB_MIN_DIFFUSION = (0.0f);
	public const float EAXREVERB_MAX_DIFFUSION = (1.0f);
	public const float EAXREVERB_DEFAULT_DIFFUSION = (1.0f);
	public const float EAXREVERB_MIN_GAIN = (0.0f);
	public const float EAXREVERB_MAX_GAIN = (1.0f);
	public const float EAXREVERB_DEFAULT_GAIN = (0.32f);
	public const float EAXREVERB_MIN_GAINHF = (0.0f);
	public const float EAXREVERB_MAX_GAINHF = (1.0f);
	public const float EAXREVERB_DEFAULT_GAINHF = (0.89f);
	public const float EAXREVERB_MIN_GAINLF = (0.0f);
	public const float EAXREVERB_MAX_GAINLF = (1.0f);
	public const float EAXREVERB_DEFAULT_GAINLF = (1.0f);
	public const float EAXREVERB_MIN_DECAY_TIME = (0.1f);
	public const float EAXREVERB_MAX_DECAY_TIME = (20.0f);
	public const float EAXREVERB_DEFAULT_DECAY_TIME = (1.49f);
	public const float EAXREVERB_MIN_DECAY_HFRATIO = (0.1f);
	public const float EAXREVERB_MAX_DECAY_HFRATIO = (2.0f);
	public const float EAXREVERB_DEFAULT_DECAY_HFRATIO = (0.83f);
	public const float EAXREVERB_MIN_DECAY_LFRATIO = (0.1f);
	public const float EAXREVERB_MAX_DECAY_LFRATIO = (2.0f);
	public const float EAXREVERB_DEFAULT_DECAY_LFRATIO = (1.0f);
	public const float EAXREVERB_MIN_REFLECTIONS_GAIN = (0.0f);
	public const float EAXREVERB_MAX_REFLECTIONS_GAIN = (3.16f);
	public const float EAXREVERB_DEFAULT_REFLECTIONS_GAIN = (0.05f);
	public const float EAXREVERB_MIN_REFLECTIONS_DELAY = (0.0f);
	public const float EAXREVERB_MAX_REFLECTIONS_DELAY = (0.3f);
	public const float EAXREVERB_DEFAULT_REFLECTIONS_DELAY = (0.007f);
	public const float EAXREVERB_DEFAULT_REFLECTIONS_PAN_XYZ = (0.0f);
	public const float EAXREVERB_MIN_LATE_REVERB_GAIN = (0.0f);
	public const float EAXREVERB_MAX_LATE_REVERB_GAIN = (10.0f);
	public const float EAXREVERB_DEFAULT_LATE_REVERB_GAIN = (1.26f);
	public const float EAXREVERB_MIN_LATE_REVERB_DELAY = (0.0f);
	public const float EAXREVERB_MAX_LATE_REVERB_DELAY = (0.1f);
	public const float EAXREVERB_DEFAULT_LATE_REVERB_DELAY = (0.011f);
	public const float EAXREVERB_DEFAULT_LATE_REVERB_PAN_XYZ = (0.0f);
	public const float EAXREVERB_MIN_ECHO_TIME = (0.075f);
	public const float EAXREVERB_MAX_ECHO_TIME = (0.25f);
	public const float EAXREVERB_DEFAULT_ECHO_TIME = (0.25f);
	public const float EAXREVERB_MIN_ECHO_DEPTH = (0.0f);
	public const float EAXREVERB_MAX_ECHO_DEPTH = (1.0f);
	public const float EAXREVERB_DEFAULT_ECHO_DEPTH = (0.0f);
	public const float EAXREVERB_MIN_MODULATION_TIME = (0.04f);
	public const float EAXREVERB_MAX_MODULATION_TIME = (4.0f);
	public const float EAXREVERB_DEFAULT_MODULATION_TIME = (0.25f);
	public const float EAXREVERB_MIN_MODULATION_DEPTH = (0.0f);
	public const float EAXREVERB_MAX_MODULATION_DEPTH = (1.0f);
	public const float EAXREVERB_DEFAULT_MODULATION_DEPTH = (0.0f);
	public const float EAXREVERB_MIN_AIR_ABSORPTION_GAINHF = (0.892f);
	public const float EAXREVERB_MAX_AIR_ABSORPTION_GAINHF = (1.0f);
	public const float EAXREVERB_DEFAULT_AIR_ABSORPTION_GAINHF = (0.994f);
	public const float EAXREVERB_MIN_HFREFERENCE = (1000.0f);
	public const float EAXREVERB_MAX_HFREFERENCE = (20000.0f);
	public const float EAXREVERB_DEFAULT_HFREFERENCE = (5000.0f);
	public const float EAXREVERB_MIN_LFREFERENCE = (20.0f);
	public const float EAXREVERB_MAX_LFREFERENCE = (1000.0f);
	public const float EAXREVERB_DEFAULT_LFREFERENCE = (250.0f);
	public const float EAXREVERB_MIN_ROOM_ROLLOFF_FACTOR = (0.0f);
	public const float EAXREVERB_MAX_ROOM_ROLLOFF_FACTOR = (10.0f);
	public const float EAXREVERB_DEFAULT_ROOM_ROLLOFF_FACTOR = (0.0f);
	public const int EAXREVERB_MIN_DECAY_HFLIMIT = FALSE;
	public const int EAXREVERB_MAX_DECAY_HFLIMIT = TRUE;
	public const int EAXREVERB_DEFAULT_DECAY_HFLIMIT = TRUE;
	public const int CHORUS_WAVEFORM_SINUSOID = (0);
	public const int CHORUS_WAVEFORM_TRIANGLE = (1);
	public const int CHORUS_MIN_WAVEFORM = (0);
	public const int CHORUS_MAX_WAVEFORM = (1);
	public const int CHORUS_DEFAULT_WAVEFORM = (1);
	public const int CHORUS_MIN_PHASE = (-180);
	public const int CHORUS_MAX_PHASE = (180);
	public const int CHORUS_DEFAULT_PHASE = (90);
	public const float CHORUS_MIN_RATE = (0.0f);
	public const float CHORUS_MAX_RATE = (10.0f);
	public const float CHORUS_DEFAULT_RATE = (1.1f);
	public const float CHORUS_MIN_DEPTH = (0.0f);
	public const float CHORUS_MAX_DEPTH = (1.0f);
	public const float CHORUS_DEFAULT_DEPTH = (0.1f);
	public const float CHORUS_MIN_FEEDBACK = (-1.0f);
	public const float CHORUS_MAX_FEEDBACK = (1.0f);
	public const float CHORUS_DEFAULT_FEEDBACK = (0.25f);
	public const float CHORUS_MIN_DELAY = (0.0f);
	public const float CHORUS_MAX_DELAY = (0.016f);
	public const float CHORUS_DEFAULT_DELAY = (0.016f);
	public const float DISTORTION_MIN_EDGE = (0.0f);
	public const float DISTORTION_MAX_EDGE = (1.0f);
	public const float DISTORTION_DEFAULT_EDGE = (0.2f);
	public const float DISTORTION_MIN_GAIN = (0.01f);
	public const float DISTORTION_MAX_GAIN = (1.0f);
	public const float DISTORTION_DEFAULT_GAIN = (0.05f);
	public const float DISTORTION_MIN_LOWPASS_CUTOFF = (80.0f);
	public const float DISTORTION_MAX_LOWPASS_CUTOFF = (24000.0f);
	public const float DISTORTION_DEFAULT_LOWPASS_CUTOFF = (8000.0f);
	public const float DISTORTION_MIN_EQCENTER = (80.0f);
	public const float DISTORTION_MAX_EQCENTER = (24000.0f);
	public const float DISTORTION_DEFAULT_EQCENTER = (3600.0f);
	public const float DISTORTION_MIN_EQBANDWIDTH = (80.0f);
	public const float DISTORTION_MAX_EQBANDWIDTH = (24000.0f);
	public const float DISTORTION_DEFAULT_EQBANDWIDTH = (3600.0f);
	public const float ECHO_MIN_DELAY = (0.0f);
	public const float ECHO_MAX_DELAY = (0.207f);
	public const float ECHO_DEFAULT_DELAY = (0.1f);
	public const float ECHO_MIN_LRDELAY = (0.0f);
	public const float ECHO_MAX_LRDELAY = (0.404f);
	public const float ECHO_DEFAULT_LRDELAY = (0.1f);
	public const float ECHO_MIN_DAMPING = (0.0f);
	public const float ECHO_MAX_DAMPING = (0.99f);
	public const float ECHO_DEFAULT_DAMPING = (0.5f);
	public const float ECHO_MIN_FEEDBACK = (0.0f);
	public const float ECHO_MAX_FEEDBACK = (1.0f);
	public const float ECHO_DEFAULT_FEEDBACK = (0.5f);
	public const float ECHO_MIN_SPREAD = (-1.0f);
	public const float ECHO_MAX_SPREAD = (1.0f);
	public const float ECHO_DEFAULT_SPREAD = (-1.0f);
	public const int FLANGER_WAVEFORM_SINUSOID = (0);
	public const int FLANGER_WAVEFORM_TRIANGLE = (1);
	public const int FLANGER_MIN_WAVEFORM = (0);
	public const int FLANGER_MAX_WAVEFORM = (1);
	public const int FLANGER_DEFAULT_WAVEFORM = (1);
	public const int FLANGER_MIN_PHASE = (-180);
	public const int FLANGER_MAX_PHASE = (180);
	public const int FLANGER_DEFAULT_PHASE = (0);
	public const float FLANGER_MIN_RATE = (0.0f);
	public const float FLANGER_MAX_RATE = (10.0f);
	public const float FLANGER_DEFAULT_RATE = (0.27f);
	public const float FLANGER_MIN_DEPTH = (0.0f);
	public const float FLANGER_MAX_DEPTH = (1.0f);
	public const float FLANGER_DEFAULT_DEPTH = (1.0f);
	public const float FLANGER_MIN_FEEDBACK = (-1.0f);
	public const float FLANGER_MAX_FEEDBACK = (1.0f);
	public const float FLANGER_DEFAULT_FEEDBACK = (-0.5f);
	public const float FLANGER_MIN_DELAY = (0.0f);
	public const float FLANGER_MAX_DELAY = (0.004f);
	public const float FLANGER_DEFAULT_DELAY = (0.002f);
	public const float FREQUENCY_SHIFTER_MIN_FREQUENCY = (0.0f);
	public const float FREQUENCY_SHIFTER_MAX_FREQUENCY = (24000.0f);
	public const float FREQUENCY_SHIFTER_DEFAULT_FREQUENCY = (0.0f);
	public const int FREQUENCY_SHIFTER_MIN_LEFT_DIRECTION = (0);
	public const int FREQUENCY_SHIFTER_MAX_LEFT_DIRECTION = (2);
	public const int FREQUENCY_SHIFTER_DEFAULT_LEFT_DIRECTION = (0);
	public const int FREQUENCY_SHIFTER_DIRECTION_DOWN = (0);
	public const int FREQUENCY_SHIFTER_DIRECTION_UP = (1);
	public const int FREQUENCY_SHIFTER_DIRECTION_OFF = (2);
	public const int FREQUENCY_SHIFTER_MIN_RIGHT_DIRECTION = (0);
	public const int FREQUENCY_SHIFTER_MAX_RIGHT_DIRECTION = (2);
	public const int FREQUENCY_SHIFTER_DEFAULT_RIGHT_DIRECTION = (0);
	public const int VOCAL_MORPHER_MIN_PHONEMEA = (0);
	public const int VOCAL_MORPHER_MAX_PHONEMEA = (29);
	public const int VOCAL_MORPHER_DEFAULT_PHONEMEA = (0);
	public const int VOCAL_MORPHER_MIN_PHONEMEA_COARSE_TUNING = (-24);
	public const int VOCAL_MORPHER_MAX_PHONEMEA_COARSE_TUNING = (24);
	public const int VOCAL_MORPHER_DEFAULT_PHONEMEA_COARSE_TUNING = (0);
	public const int VOCAL_MORPHER_MIN_PHONEMEB = (0);
	public const int VOCAL_MORPHER_MAX_PHONEMEB = (29);
	public const int VOCAL_MORPHER_DEFAULT_PHONEMEB = (10);
	public const int VOCAL_MORPHER_MIN_PHONEMEB_COARSE_TUNING = (-24);
	public const int VOCAL_MORPHER_MAX_PHONEMEB_COARSE_TUNING = (24);
	public const int VOCAL_MORPHER_DEFAULT_PHONEMEB_COARSE_TUNING = (0);
	public const int VOCAL_MORPHER_PHONEME_A = (0);
	public const int VOCAL_MORPHER_PHONEME_E = (1);
	public const int VOCAL_MORPHER_PHONEME_I = (2);
	public const int VOCAL_MORPHER_PHONEME_O = (3);
	public const int VOCAL_MORPHER_PHONEME_U = (4);
	public const int VOCAL_MORPHER_PHONEME_AA = (5);
	public const int VOCAL_MORPHER_PHONEME_AE = (6);
	public const int VOCAL_MORPHER_PHONEME_AH = (7);
	public const int VOCAL_MORPHER_PHONEME_AO = (8);
	public const int VOCAL_MORPHER_PHONEME_EH = (9);
	public const int VOCAL_MORPHER_PHONEME_ER = (10);
	public const int VOCAL_MORPHER_PHONEME_IH = (11);
	public const int VOCAL_MORPHER_PHONEME_IY = (12);
	public const int VOCAL_MORPHER_PHONEME_UH = (13);
	public const int VOCAL_MORPHER_PHONEME_UW = (14);
	public const int VOCAL_MORPHER_PHONEME_B = (15);
	public const int VOCAL_MORPHER_PHONEME_D = (16);
	public const int VOCAL_MORPHER_PHONEME_F = (17);
	public const int VOCAL_MORPHER_PHONEME_G = (18);
	public const int VOCAL_MORPHER_PHONEME_J = (19);
	public const int VOCAL_MORPHER_PHONEME_K = (20);
	public const int VOCAL_MORPHER_PHONEME_L = (21);
	public const int VOCAL_MORPHER_PHONEME_M = (22);
	public const int VOCAL_MORPHER_PHONEME_N = (23);
	public const int VOCAL_MORPHER_PHONEME_P = (24);
	public const int VOCAL_MORPHER_PHONEME_R = (25);
	public const int VOCAL_MORPHER_PHONEME_S = (26);
	public const int VOCAL_MORPHER_PHONEME_T = (27);
	public const int VOCAL_MORPHER_PHONEME_V = (28);
	public const int VOCAL_MORPHER_PHONEME_Z = (29);
	public const int VOCAL_MORPHER_WAVEFORM_SINUSOID = (0);
	public const int VOCAL_MORPHER_WAVEFORM_TRIANGLE = (1);
	public const int VOCAL_MORPHER_WAVEFORM_SAWTOOTH = (2);
	public const int VOCAL_MORPHER_MIN_WAVEFORM = (0);
	public const int VOCAL_MORPHER_MAX_WAVEFORM = (2);
	public const int VOCAL_MORPHER_DEFAULT_WAVEFORM = (0);
	public const float VOCAL_MORPHER_MIN_RATE = (0.0f);
	public const float VOCAL_MORPHER_MAX_RATE = (10.0f);
	public const float VOCAL_MORPHER_DEFAULT_RATE = (1.41f);
	public const int PITCH_SHIFTER_MIN_COARSE_TUNE = (-12);
	public const int PITCH_SHIFTER_MAX_COARSE_TUNE = (12);
	public const int PITCH_SHIFTER_DEFAULT_COARSE_TUNE = (12);
	public const int PITCH_SHIFTER_MIN_FINE_TUNE = (-50);
	public const int PITCH_SHIFTER_MAX_FINE_TUNE = (50);
	public const int PITCH_SHIFTER_DEFAULT_FINE_TUNE = (0);
	public const float RING_MODULATOR_MIN_FREQUENCY = (0.0f);
	public const float RING_MODULATOR_MAX_FREQUENCY = (8000.0f);
	public const float RING_MODULATOR_DEFAULT_FREQUENCY = (440.0f);
	public const float RING_MODULATOR_MIN_HIGHPASS_CUTOFF = (0.0f);
	public const float RING_MODULATOR_MAX_HIGHPASS_CUTOFF = (24000.0f);
	public const float RING_MODULATOR_DEFAULT_HIGHPASS_CUTOFF = (800.0f);
	public const int RING_MODULATOR_SINUSOID = (0);
	public const int RING_MODULATOR_SAWTOOTH = (1);
	public const int RING_MODULATOR_SQUARE = (2);
	public const int RING_MODULATOR_MIN_WAVEFORM = (0);
	public const int RING_MODULATOR_MAX_WAVEFORM = (2);
	public const int RING_MODULATOR_DEFAULT_WAVEFORM = (0);
	public const float AUTOWAH_MIN_ATTACK_TIME = (0.0001f);
	public const float AUTOWAH_MAX_ATTACK_TIME = (1.0f);
	public const float AUTOWAH_DEFAULT_ATTACK_TIME = (0.06f);
	public const float AUTOWAH_MIN_RELEASE_TIME = (0.0001f);
	public const float AUTOWAH_MAX_RELEASE_TIME = (1.0f);
	public const float AUTOWAH_DEFAULT_RELEASE_TIME = (0.06f);
	public const float AUTOWAH_MIN_RESONANCE = (2.0f);
	public const float AUTOWAH_MAX_RESONANCE = (1000.0f);
	public const float AUTOWAH_DEFAULT_RESONANCE = (1000.0f);
	public const float AUTOWAH_MIN_PEAK_GAIN = (0.00003f);
	public const float AUTOWAH_MAX_PEAK_GAIN = (31621.0f);
	public const float AUTOWAH_DEFAULT_PEAK_GAIN = (11.22f);
	public const int COMPRESSOR_MIN_ONOFF = (0);
	public const int COMPRESSOR_MAX_ONOFF = (1);
	public const int COMPRESSOR_DEFAULT_ONOFF = (1);
	public const float EQUALIZER_MIN_LOW_GAIN = (0.126f);
	public const float EQUALIZER_MAX_LOW_GAIN = (7.943f);
	public const float EQUALIZER_DEFAULT_LOW_GAIN = (1.0f);
	public const float EQUALIZER_MIN_LOW_CUTOFF = (50.0f);
	public const float EQUALIZER_MAX_LOW_CUTOFF = (800.0f);
	public const float EQUALIZER_DEFAULT_LOW_CUTOFF = (200.0f);
	public const float EQUALIZER_MIN_MID1_GAIN = (0.126f);
	public const float EQUALIZER_MAX_MID1_GAIN = (7.943f);
	public const float EQUALIZER_DEFAULT_MID1_GAIN = (1.0f);
	public const float EQUALIZER_MIN_MID1_CENTER = (200.0f);
	public const float EQUALIZER_MAX_MID1_CENTER = (3000.0f);
	public const float EQUALIZER_DEFAULT_MID1_CENTER = (500.0f);
	public const float EQUALIZER_MIN_MID1_WIDTH = (0.01f);
	public const float EQUALIZER_MAX_MID1_WIDTH = (1.0f);
	public const float EQUALIZER_DEFAULT_MID1_WIDTH = (1.0f);
	public const float EQUALIZER_MIN_MID2_GAIN = (0.126f);
	public const float EQUALIZER_MAX_MID2_GAIN = (7.943f);
	public const float EQUALIZER_DEFAULT_MID2_GAIN = (1.0f);
	public const float EQUALIZER_MIN_MID2_CENTER = (1000.0f);
	public const float EQUALIZER_MAX_MID2_CENTER = (8000.0f);
	public const float EQUALIZER_DEFAULT_MID2_CENTER = (3000.0f);
	public const float EQUALIZER_MIN_MID2_WIDTH = (0.01f);
	public const float EQUALIZER_MAX_MID2_WIDTH = (1.0f);
	public const float EQUALIZER_DEFAULT_MID2_WIDTH = (1.0f);
	public const float EQUALIZER_MIN_HIGH_GAIN = (0.126f);
	public const float EQUALIZER_MAX_HIGH_GAIN = (7.943f);
	public const float EQUALIZER_DEFAULT_HIGH_GAIN = (1.0f);
	public const float EQUALIZER_MIN_HIGH_CUTOFF = (4000.0f);
	public const float EQUALIZER_MAX_HIGH_CUTOFF = (16000.0f);
	public const float EQUALIZER_DEFAULT_HIGH_CUTOFF = (6000.0f);
	public const float MIN_AIR_ABSORPTION_FACTOR = (0.0f);
	public const float MAX_AIR_ABSORPTION_FACTOR = (10.0f);
	public const float DEFAULT_AIR_ABSORPTION_FACTOR = (0.0f);
	public const float MIN_ROOM_ROLLOFF_FACTOR = (0.0f);
	public const float MAX_ROOM_ROLLOFF_FACTOR = (10.0f);
	public const float DEFAULT_ROOM_ROLLOFF_FACTOR = (0.0f);
	public const float MIN_CONE_OUTER_GAINHF = (0.0f);
	public const float MAX_CONE_OUTER_GAINHF = (1.0f);
	public const float DEFAULT_CONE_OUTER_GAINHF = (1.0f);
	public const int MIN_DIRECT_FILTER_GAINHF_AUTO = FALSE;
	public const int MAX_DIRECT_FILTER_GAINHF_AUTO = TRUE;
	public const int DEFAULT_DIRECT_FILTER_GAINHF_AUTO = TRUE;
	public const int MIN_AUXILIARY_SEND_FILTER_GAIN_AUTO = FALSE;
	public const int MAX_AUXILIARY_SEND_FILTER_GAIN_AUTO = TRUE;
	public const int DEFAULT_AUXILIARY_SEND_FILTER_GAIN_AUTO = TRUE;
	public const int MIN_AUXILIARY_SEND_FILTER_GAINHF_AUTO = FALSE;
	public const int MAX_AUXILIARY_SEND_FILTER_GAINHF_AUTO = TRUE;
	public const int DEFAULT_AUXILIARY_SEND_FILTER_GAINHF_AUTO = TRUE;
	public const float MIN_METERS_PER_UNIT = float.MinValue;
	public const float MAX_METERS_PER_UNIT = float.MaxValue;
	public const float DEFAULT_METERS_PER_UNIT = (1.0f);
}
