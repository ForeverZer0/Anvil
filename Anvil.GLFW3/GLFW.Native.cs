using System.Runtime.InteropServices;
using System.Security;
using Anvil.GLFW3.Vulkan;
using Anvil.Native;

namespace Anvil.GLFW3;

[SuppressUnmanagedCodeSecurity]
public static unsafe partial class GLFW
{
    private const int TRUE = 1;
    private const int FALSE = 0;
    private const int DONT_CARE = -1;

    private static readonly delegate *unmanaged[Cdecl]<int> glfwInit;
    private static readonly delegate *unmanaged[Cdecl]<void> glfwTerminate;
    private static readonly delegate *unmanaged[Cdecl]<InitHint,int,void> glfwInitHint;
    private static readonly delegate *unmanaged[Cdecl]<int*,int*,int*,void> glfwGetVersion;
    private static readonly delegate *unmanaged[Cdecl]<IntPtr> glfwGetVersionString;
    private static readonly delegate *unmanaged[Cdecl]<byte**,ErrorCode> glfwGetError;
    private static readonly delegate *unmanaged[Cdecl]<ErrorCallbackImpl?,ErrorCallbackImpl?> glfwSetErrorCallback;
    private static readonly delegate *unmanaged[Cdecl]<int*,Monitor*> glfwGetMonitors;
    private static readonly delegate *unmanaged[Cdecl]<Monitor> glfwGetPrimaryMonitor;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,int*,int*,void> glfwGetMonitorPos;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,int*,int*,int*,int*,void> glfwGetMonitorWorkarea;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,int*,int*,void> glfwGetMonitorPhysicalSize;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,float*,float*,void> glfwGetMonitorContentScale;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,IntPtr> glfwGetMonitorName;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,IntPtr,void> glfwSetMonitorUserPointer;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,IntPtr> glfwGetMonitorUserPointer;
    private static readonly delegate *unmanaged[Cdecl]<MonitorCallback?,MonitorCallback?> glfwSetMonitorCallback;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,int*,VideoMode*> glfwGetVideoModes;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,VideoMode*> glfwGetVideoMode;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,float,void> glfwSetGamma;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,GammaRamp*> glfwGetGammaRamp;
    private static readonly delegate *unmanaged[Cdecl]<Monitor,GammaRamp*,void> glfwSetGammaRamp;
    private static readonly delegate *unmanaged[Cdecl]<void> glfwDefaultWindowHints;
    private static readonly delegate *unmanaged[Cdecl]<WindowHint,int,void> glfwWindowHint;
    private static readonly delegate *unmanaged[Cdecl]<WindowHint,byte*,void> glfwWindowHintString;
    private static readonly delegate *unmanaged[Cdecl]<int,int,byte*,Monitor,Window,Window> glfwCreateWindow;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwDestroyWindow;
    private static readonly delegate *unmanaged[Cdecl]<Window,int> glfwWindowShouldClose;
    private static readonly delegate *unmanaged[Cdecl]<Window,int,void> glfwSetWindowShouldClose;
    private static readonly delegate *unmanaged[Cdecl]<Window,byte*,void> glfwSetWindowTitle;
    private static readonly delegate *unmanaged[Cdecl]<Window,int,Bitmap*,void> glfwSetWindowIcon;
    private static readonly delegate *unmanaged[Cdecl]<Window,int*,int*,void> glfwGetWindowPos;
    private static readonly delegate *unmanaged[Cdecl]<Window,int,int,void> glfwSetWindowPos;
    private static readonly delegate *unmanaged[Cdecl]<Window,int*,int*,void> glfwGetWindowSize;
    private static readonly delegate *unmanaged[Cdecl]<Window,int,int,int,int,void> glfwSetWindowSizeLimits;
    private static readonly delegate *unmanaged[Cdecl]<Window,int,int,void> glfwSetWindowAspectRatio;
    private static readonly delegate *unmanaged[Cdecl]<Window,int,int,void> glfwSetWindowSize;
    private static readonly delegate *unmanaged[Cdecl]<Window,int*,int*,void> glfwGetFramebufferSize;
    private static readonly delegate *unmanaged[Cdecl]<Window,int*,int*,int*,int*,void> glfwGetWindowFrameSize;
    private static readonly delegate *unmanaged[Cdecl]<Window,float*,float*,void> glfwGetWindowContentScale;
    private static readonly delegate *unmanaged[Cdecl]<Window,float> glfwGetWindowOpacity;
    private static readonly delegate *unmanaged[Cdecl]<Window,float,void> glfwSetWindowOpacity;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwIconifyWindow;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwRestoreWindow;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwMaximizeWindow;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwShowWindow;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwHideWindow;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwFocusWindow;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwRequestWindowAttention;
    private static readonly delegate *unmanaged[Cdecl]<Window,Monitor> glfwGetWindowMonitor;
    private static readonly delegate *unmanaged[Cdecl]<Window,Monitor,int,int,int,int,int,void> glfwSetWindowMonitor;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowAttrib,int> glfwGetWindowAttrib;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowAttrib,int,void> glfwSetWindowAttrib;
    private static readonly delegate *unmanaged[Cdecl]<Window,IntPtr,void> glfwSetWindowUserPointer;
    private static readonly delegate *unmanaged[Cdecl]<Window,IntPtr> glfwGetWindowUserPointer;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowPositionCallback?,WindowPositionCallback?> glfwSetWindowPosCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowSizeCallback?,WindowSizeCallback?> glfwSetWindowSizeCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowCloseCallbackImpl?,WindowCloseCallbackImpl?> glfwSetWindowCloseCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowRefreshCallback?,WindowRefreshCallback?> glfwSetWindowRefreshCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowFocusCallback?,WindowFocusCallback?> glfwSetWindowFocusCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowMinimizeCallback?,WindowMinimizeCallback?> glfwSetWindowIconifyCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowMaximizeCallback?,WindowMaximizeCallback?> glfwSetWindowMaximizeCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,FramebufferSizeCallback?,FramebufferSizeCallback?> glfwSetFramebufferSizeCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,WindowScaleCallback?,WindowScaleCallback?> glfwSetWindowContentScaleCallback;
    private static readonly delegate *unmanaged[Cdecl]<void> glfwPollEvents;
    private static readonly delegate *unmanaged[Cdecl]<void> glfwWaitEvents;
    private static readonly delegate *unmanaged[Cdecl]<double,void> glfwWaitEventsTimeout;
    private static readonly delegate *unmanaged[Cdecl]<void> glfwPostEmptyEvent;
    private static readonly delegate *unmanaged[Cdecl]<Window,InputMode,int> glfwGetInputMode;
    private static readonly delegate *unmanaged[Cdecl]<Window,InputMode,int,void> glfwSetInputMode;
    private static readonly delegate *unmanaged[Cdecl]<int> glfwRawMouseMotionSupported;
    private static readonly delegate *unmanaged[Cdecl]<Key,int,IntPtr> glfwGetKeyName;
    private static readonly delegate *unmanaged[Cdecl]<Key,int> glfwGetKeyScancode;
    private static readonly delegate *unmanaged[Cdecl]<Window,Key,int> glfwGetKey;
    private static readonly delegate *unmanaged[Cdecl]<Window,MouseButton,int> glfwGetMouseButton;
    private static readonly delegate *unmanaged[Cdecl]<Window,double*,double*,void> glfwGetCursorPos;
    private static readonly delegate *unmanaged[Cdecl]<Window,double,double,void> glfwSetCursorPos;
    private static readonly delegate *unmanaged[Cdecl]<Bitmap*,int,int,Cursor> glfwCreateCursor;
    private static readonly delegate *unmanaged[Cdecl]<CursorShape,Cursor> glfwCreateStandardCursor;
    private static readonly delegate *unmanaged[Cdecl]<Cursor,void> glfwDestroyCursor;
    private static readonly delegate *unmanaged[Cdecl]<Window,Cursor,void> glfwSetCursor;
    private static readonly delegate *unmanaged[Cdecl]<Window,KeyCallback?,KeyCallback?> glfwSetKeyCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,CharCallback?,CharCallback?> glfwSetCharCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,MouseButtonCallback?,MouseButtonCallback?> glfwSetMouseButtonCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,CursorPositionCallback?,CursorPositionCallback?> glfwSetCursorPosCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,CursorEnterCallback?,CursorEnterCallback?> glfwSetCursorEnterCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,ScrollCallback?,ScrollCallback?> glfwSetScrollCallback;
    private static readonly delegate *unmanaged[Cdecl]<Window,FileDropCallbackImpl?,FileDropCallbackImpl?> glfwSetDropCallback;
    private static readonly delegate *unmanaged[Cdecl]<int,int> glfwJoystickPresent;
    private static readonly delegate *unmanaged[Cdecl]<int,int*,float*> glfwGetJoystickAxes;
    private static readonly delegate *unmanaged[Cdecl]<int,int*,bool*> glfwGetJoystickButtons;
    private static readonly delegate *unmanaged[Cdecl]<int,int*,bool*> glfwGetJoystickHats;
    private static readonly delegate *unmanaged[Cdecl]<int,IntPtr> glfwGetJoystickName;
    private static readonly delegate *unmanaged[Cdecl]<int,IntPtr> glfwGetJoystickGUID;
    private static readonly delegate *unmanaged[Cdecl]<int,IntPtr,void> glfwSetJoystickUserPointer;
    private static readonly delegate *unmanaged[Cdecl]<int,IntPtr> glfwGetJoystickUserPointer;
    private static readonly delegate *unmanaged[Cdecl]<int,int> glfwJoystickIsGamepad;
    private static readonly delegate *unmanaged[Cdecl]<JoystickCallback?,JoystickCallback?> glfwSetJoystickCallback;
    private static readonly delegate *unmanaged[Cdecl]<byte*,int> glfwUpdateGamepadMappings;
    private static readonly delegate *unmanaged[Cdecl]<int,IntPtr> glfwGetGamepadName;
    private static readonly delegate *unmanaged[Cdecl]<int,GamepadState*,int> glfwGetGamepadState;
    private static readonly delegate *unmanaged[Cdecl]<Window,byte*,void> glfwSetClipboardString;
    private static readonly delegate *unmanaged[Cdecl]<Window,IntPtr> glfwGetClipboardString;
    private static readonly delegate *unmanaged[Cdecl]<double> glfwGetTime;
    private static readonly delegate *unmanaged[Cdecl]<double,void> glfwSetTime;
    private static readonly delegate *unmanaged[Cdecl]<ulong> glfwGetTimerValue;
    private static readonly delegate *unmanaged[Cdecl]<ulong> glfwGetTimerFrequency;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwMakeContextCurrent;
    private static readonly delegate *unmanaged[Cdecl]<Window> glfwGetCurrentContext;
    private static readonly delegate *unmanaged[Cdecl]<Window,void> glfwSwapBuffers;
    private static readonly delegate *unmanaged[Cdecl]<int,void> glfwSwapInterval;
    private static readonly delegate *unmanaged[Cdecl]<byte*,int> glfwExtensionSupported;
    private static readonly delegate *unmanaged[Cdecl]<byte*,IntPtr> glfwGetProcAddress;
    private static readonly delegate *unmanaged[Cdecl]<int> glfwVulkanSupported;
    private static readonly delegate *unmanaged[Cdecl]<uint*, IntPtr*> glfwGetRequiredInstanceExtensions;
    private static readonly delegate *unmanaged[Cdecl]<Instance, byte*, IntPtr> glfwGetInstanceProcAddress;
    private static readonly delegate *unmanaged[Cdecl]<Instance, PhysicalDevice, uint, int> glfwGetPhysicalDevicePresentationSupport;
    private static readonly delegate *unmanaged[Cdecl]<Instance,Window,IntPtr*,SurfaceKHR*,Result> glfwCreateWindowSurface;
    private static readonly delegate *unmanaged[Cdecl]<Window, IntPtr> glfwGetWGLContext;
    private static readonly delegate *unmanaged[Cdecl]<Window, IntPtr> glfwGetGLXContext;
    private static readonly delegate *unmanaged[Cdecl]<Window, IntPtr> glfwGetEGLContext;
    private static readonly delegate *unmanaged[Cdecl]<Window, int> glfwGetNSGLContext;
    private static readonly ErrorCallbackImpl onError;
    private static readonly MonitorCallback? monitorCallback;
    private static readonly JoystickCallback? joystickCallback;
    private static readonly FileDropCallbackImpl onFileDrop;
    private static readonly WindowCloseCallbackImpl onWindowClose;
    private static readonly Dictionary<Window, WindowCallbacks> windowCallbacksMap;
    private static readonly UnmanagedLibrary Library;
    
        static GLFW()
    {
        // ReSharper disable StringLiteralTypo
        Library = new UnmanagedLibrary("/usr/lib/libglfw.so");
        glfwInit = (delegate *unmanaged[Cdecl]<int>)Library.Import("glfwInit");
        glfwTerminate = (delegate *unmanaged[Cdecl]<void>)Library.Import("glfwTerminate");
        glfwInitHint = (delegate *unmanaged[Cdecl]<InitHint, int, void>)Library.Import("glfwInitHint");
        glfwGetVersion = (delegate *unmanaged[Cdecl]<int*, int*, int*, void>)Library.Import("glfwGetVersion");
        glfwGetVersionString = (delegate *unmanaged[Cdecl]<IntPtr>)Library.Import("glfwGetVersionString");
        glfwGetError = (delegate *unmanaged[Cdecl]<byte**, ErrorCode>)Library.Import("glfwGetError");
        glfwSetErrorCallback = (delegate *unmanaged[Cdecl]<ErrorCallbackImpl?, ErrorCallbackImpl?>)Library.Import("glfwSetErrorCallback");
        glfwGetMonitors = (delegate *unmanaged[Cdecl]<int*, Monitor*>)Library.Import("glfwGetMonitors");
        glfwGetPrimaryMonitor = (delegate *unmanaged[Cdecl]<Monitor>)Library.Import("glfwGetPrimaryMonitor");
        glfwGetMonitorPos = (delegate *unmanaged[Cdecl]<Monitor, int*, int*, void>)Library.Import("glfwGetMonitorPos");
        glfwGetMonitorWorkarea = (delegate *unmanaged[Cdecl]<Monitor, int*, int*, int*, int*, void>)Library.Import("glfwGetMonitorWorkarea");
        glfwGetMonitorPhysicalSize = (delegate *unmanaged[Cdecl]<Monitor, int*, int*, void>)Library.Import("glfwGetMonitorPhysicalSize");
        glfwGetMonitorContentScale = (delegate *unmanaged[Cdecl]<Monitor, float*, float*, void>)Library.Import("glfwGetMonitorContentScale");
        glfwGetMonitorName = (delegate *unmanaged[Cdecl]<Monitor, IntPtr>)Library.Import("glfwGetMonitorName");
        glfwSetMonitorUserPointer = (delegate *unmanaged[Cdecl]<Monitor, IntPtr, void>)Library.Import("glfwSetMonitorUserPointer");
        glfwGetMonitorUserPointer = (delegate *unmanaged[Cdecl]<Monitor, IntPtr>)Library.Import("glfwGetMonitorUserPointer");
        glfwSetMonitorCallback = (delegate *unmanaged[Cdecl]<MonitorCallback?, MonitorCallback?>)Library.Import("glfwSetMonitorCallback");
        glfwGetVideoModes = (delegate *unmanaged[Cdecl]<Monitor, int*, VideoMode*>)Library.Import("glfwGetVideoModes");
        glfwGetVideoMode = (delegate *unmanaged[Cdecl]<Monitor, VideoMode*>)Library.Import("glfwGetVideoMode");
        glfwSetGamma = (delegate *unmanaged[Cdecl]<Monitor, float, void>)Library.Import("glfwSetGamma");
        glfwGetGammaRamp = (delegate *unmanaged[Cdecl]<Monitor, GammaRamp*>)Library.Import("glfwGetGammaRamp");
        glfwSetGammaRamp = (delegate *unmanaged[Cdecl]<Monitor, GammaRamp*, void>)Library.Import("glfwSetGammaRamp");
        glfwDefaultWindowHints = (delegate *unmanaged[Cdecl]<void>)Library.Import("glfwDefaultWindowHints");
        glfwWindowHint = (delegate *unmanaged[Cdecl]<WindowHint, int, void>)Library.Import("glfwWindowHint");
        glfwWindowHintString = (delegate *unmanaged[Cdecl]<WindowHint, byte*, void>)Library.Import("glfwWindowHintString");
        glfwCreateWindow = (delegate *unmanaged[Cdecl]<int, int, byte*, Monitor, Window, Window>)Library.Import("glfwCreateWindow");
        glfwDestroyWindow = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwDestroyWindow");
        glfwWindowShouldClose = (delegate *unmanaged[Cdecl]<Window, int>)Library.Import("glfwWindowShouldClose");
        glfwSetWindowShouldClose = (delegate *unmanaged[Cdecl]<Window, int, void>)Library.Import("glfwSetWindowShouldClose");
        glfwSetWindowTitle = (delegate *unmanaged[Cdecl]<Window, byte*, void>)Library.Import("glfwSetWindowTitle");
        glfwSetWindowIcon = (delegate *unmanaged[Cdecl]<Window, int, Bitmap*, void>)Library.Import("glfwSetWindowIcon");
        glfwGetWindowPos = (delegate *unmanaged[Cdecl]<Window, int*, int*, void>)Library.Import("glfwGetWindowPos");
        glfwSetWindowPos = (delegate *unmanaged[Cdecl]<Window, int, int, void>)Library.Import("glfwSetWindowPos");
        glfwGetWindowSize = (delegate *unmanaged[Cdecl]<Window, int*, int*, void>)Library.Import("glfwGetWindowSize");
        glfwSetWindowSizeLimits = (delegate *unmanaged[Cdecl]<Window, int, int, int, int, void>)Library.Import("glfwSetWindowSizeLimits");
        glfwSetWindowAspectRatio = (delegate *unmanaged[Cdecl]<Window, int, int, void>)Library.Import("glfwSetWindowAspectRatio");
        glfwSetWindowSize = (delegate *unmanaged[Cdecl]<Window, int, int, void>)Library.Import("glfwSetWindowSize");
        glfwGetFramebufferSize = (delegate *unmanaged[Cdecl]<Window, int*, int*, void>)Library.Import("glfwGetFramebufferSize");
        glfwGetWindowFrameSize = (delegate *unmanaged[Cdecl]<Window, int*, int*, int*, int*, void>)Library.Import("glfwGetWindowFrameSize");
        glfwGetWindowContentScale = (delegate *unmanaged[Cdecl]<Window, float*, float*, void>)Library.Import("glfwGetWindowContentScale");
        glfwGetWindowOpacity = (delegate *unmanaged[Cdecl]<Window, float>)Library.Import("glfwGetWindowOpacity");
        glfwSetWindowOpacity = (delegate *unmanaged[Cdecl]<Window, float, void>)Library.Import("glfwSetWindowOpacity");
        glfwIconifyWindow = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwIconifyWindow");
        glfwRestoreWindow = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwRestoreWindow");
        glfwMaximizeWindow = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwMaximizeWindow");
        glfwShowWindow = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwShowWindow");
        glfwHideWindow = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwHideWindow");
        glfwFocusWindow = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwFocusWindow");
        glfwRequestWindowAttention = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwRequestWindowAttention");
        glfwGetWindowMonitor = (delegate *unmanaged[Cdecl]<Window, Monitor>)Library.Import("glfwGetWindowMonitor");
        glfwSetWindowMonitor = (delegate *unmanaged[Cdecl]<Window, Monitor, int, int, int, int, int, void>)Library.Import("glfwSetWindowMonitor");
        glfwGetWindowAttrib = (delegate *unmanaged[Cdecl]<Window, WindowAttrib, int>)Library.Import("glfwGetWindowAttrib");
        glfwSetWindowAttrib = (delegate *unmanaged[Cdecl]<Window, WindowAttrib, int, void>)Library.Import("glfwSetWindowAttrib");
        glfwSetWindowUserPointer = (delegate *unmanaged[Cdecl]<Window, IntPtr, void>)Library.Import("glfwSetWindowUserPointer");
        glfwGetWindowUserPointer = (delegate *unmanaged[Cdecl]<Window, IntPtr>)Library.Import("glfwGetWindowUserPointer");
        glfwSetWindowPosCallback = (delegate *unmanaged[Cdecl]<Window, WindowPositionCallback?, WindowPositionCallback?>)Library.Import("glfwSetWindowPosCallback");
        glfwSetWindowSizeCallback = (delegate *unmanaged[Cdecl]<Window, WindowSizeCallback?, WindowSizeCallback?>)Library.Import("glfwSetWindowSizeCallback");
        glfwSetWindowCloseCallback = (delegate *unmanaged[Cdecl]<Window, WindowCloseCallbackImpl?, WindowCloseCallbackImpl?>)Library.Import("glfwSetWindowCloseCallback");
        glfwSetWindowRefreshCallback = (delegate *unmanaged[Cdecl]<Window, WindowRefreshCallback?, WindowRefreshCallback?>)Library.Import("glfwSetWindowRefreshCallback");
        glfwSetWindowFocusCallback = (delegate *unmanaged[Cdecl]<Window, WindowFocusCallback?, WindowFocusCallback?>)Library.Import("glfwSetWindowFocusCallback");
        glfwSetWindowIconifyCallback = (delegate *unmanaged[Cdecl]<Window, WindowMinimizeCallback?, WindowMinimizeCallback?>)Library.Import("glfwSetWindowIconifyCallback");
        glfwSetWindowMaximizeCallback = (delegate *unmanaged[Cdecl]<Window, WindowMaximizeCallback?, WindowMaximizeCallback?>)Library.Import("glfwSetWindowMaximizeCallback");
        glfwSetFramebufferSizeCallback = (delegate *unmanaged[Cdecl]<Window, FramebufferSizeCallback?, FramebufferSizeCallback?>)Library.Import("glfwSetFramebufferSizeCallback");
        glfwSetWindowContentScaleCallback = (delegate *unmanaged[Cdecl]<Window, WindowScaleCallback?, WindowScaleCallback?>)Library.Import("glfwSetWindowContentScaleCallback");
        glfwPollEvents = (delegate *unmanaged[Cdecl]<void>)Library.Import("glfwPollEvents");
        glfwWaitEvents = (delegate *unmanaged[Cdecl]<void>)Library.Import("glfwWaitEvents");
        glfwWaitEventsTimeout = (delegate *unmanaged[Cdecl]<double, void>)Library.Import("glfwWaitEventsTimeout");
        glfwPostEmptyEvent = (delegate *unmanaged[Cdecl]<void>)Library.Import("glfwPostEmptyEvent");
        glfwGetInputMode = (delegate *unmanaged[Cdecl]<Window, InputMode, int>)Library.Import("glfwGetInputMode");
        glfwSetInputMode = (delegate *unmanaged[Cdecl]<Window, InputMode, int, void>)Library.Import("glfwSetInputMode");
        glfwRawMouseMotionSupported = (delegate *unmanaged[Cdecl]<int>)Library.Import("glfwRawMouseMotionSupported");
        glfwGetKeyName = (delegate *unmanaged[Cdecl]<Key, int, IntPtr>)Library.Import("glfwGetKeyName");
        glfwGetKeyScancode = (delegate *unmanaged[Cdecl]<Key, int>)Library.Import("glfwGetKeyScancode");
        glfwGetKey = (delegate *unmanaged[Cdecl]<Window, Key, int>)Library.Import("glfwGetKey");
        glfwGetMouseButton = (delegate *unmanaged[Cdecl]<Window, MouseButton, int>)Library.Import("glfwGetMouseButton");
        glfwGetCursorPos = (delegate *unmanaged[Cdecl]<Window, double*, double*, void>)Library.Import("glfwGetCursorPos");
        glfwSetCursorPos = (delegate *unmanaged[Cdecl]<Window, double, double, void>)Library.Import("glfwSetCursorPos");
        glfwCreateCursor = (delegate *unmanaged[Cdecl]<Bitmap*, int, int, Cursor>)Library.Import("glfwCreateCursor");
        glfwCreateStandardCursor = (delegate *unmanaged[Cdecl]<CursorShape, Cursor>)Library.Import("glfwCreateStandardCursor");
        glfwDestroyCursor = (delegate *unmanaged[Cdecl]<Cursor, void>)Library.Import("glfwDestroyCursor");
        glfwSetCursor = (delegate *unmanaged[Cdecl]<Window, Cursor, void>)Library.Import("glfwSetCursor");
        glfwSetKeyCallback = (delegate *unmanaged[Cdecl]<Window, KeyCallback?, KeyCallback?>)Library.Import("glfwSetKeyCallback");
        glfwSetCharCallback = (delegate *unmanaged[Cdecl]<Window, CharCallback?, CharCallback?>)Library.Import("glfwSetCharCallback");
        glfwSetMouseButtonCallback = (delegate *unmanaged[Cdecl]<Window, MouseButtonCallback?, MouseButtonCallback?>)Library.Import("glfwSetMouseButtonCallback");
        glfwSetCursorPosCallback = (delegate *unmanaged[Cdecl]<Window, CursorPositionCallback?, CursorPositionCallback?>)Library.Import("glfwSetCursorPosCallback");
        glfwSetCursorEnterCallback = (delegate *unmanaged[Cdecl]<Window, CursorEnterCallback?, CursorEnterCallback?>)Library.Import("glfwSetCursorEnterCallback");
        glfwSetScrollCallback = (delegate *unmanaged[Cdecl]<Window, ScrollCallback?, ScrollCallback?>)Library.Import("glfwSetScrollCallback");
        glfwSetDropCallback = (delegate *unmanaged[Cdecl]<Window, FileDropCallbackImpl?, FileDropCallbackImpl?>)Library.Import("glfwSetDropCallback");
        glfwJoystickPresent = (delegate *unmanaged[Cdecl]<int, int>)Library.Import("glfwJoystickPresent");
        glfwGetJoystickAxes = (delegate *unmanaged[Cdecl]<int, int*, float*>)Library.Import("glfwGetJoystickAxes");
        glfwGetJoystickButtons = (delegate *unmanaged[Cdecl]<int, int*, bool*>)Library.Import("glfwGetJoystickButtons");
        glfwGetJoystickHats = (delegate *unmanaged[Cdecl]<int, int*, bool*>)Library.Import("glfwGetJoystickHats");
        glfwGetJoystickName = (delegate *unmanaged[Cdecl]<int, IntPtr>)Library.Import("glfwGetJoystickName");
        glfwGetJoystickGUID = (delegate *unmanaged[Cdecl]<int, IntPtr>)Library.Import("glfwGetJoystickGUID");
        glfwSetJoystickUserPointer = (delegate *unmanaged[Cdecl]<int, IntPtr, void>)Library.Import("glfwSetJoystickUserPointer");
        glfwGetJoystickUserPointer = (delegate *unmanaged[Cdecl]<int, IntPtr>)Library.Import("glfwGetJoystickUserPointer");
        glfwJoystickIsGamepad = (delegate *unmanaged[Cdecl]<int, int>)Library.Import("glfwJoystickIsGamepad");
        glfwSetJoystickCallback = (delegate *unmanaged[Cdecl]<JoystickCallback?, JoystickCallback?>)Library.Import("glfwSetJoystickCallback");
        glfwUpdateGamepadMappings = (delegate *unmanaged[Cdecl]<byte*, int>)Library.Import("glfwUpdateGamepadMappings");
        glfwGetGamepadName = (delegate *unmanaged[Cdecl]<int, IntPtr>)Library.Import("glfwGetGamepadName");
        glfwGetGamepadState = (delegate *unmanaged[Cdecl]<int, GamepadState*, int>)Library.Import("glfwGetGamepadState");
        glfwSetClipboardString = (delegate *unmanaged[Cdecl]<Window, byte*, void>)Library.Import("glfwSetClipboardString");
        glfwGetClipboardString = (delegate *unmanaged[Cdecl]<Window, IntPtr>)Library.Import("glfwGetClipboardString");
        glfwGetTime = (delegate *unmanaged[Cdecl]<double>)Library.Import("glfwGetTime");
        glfwSetTime = (delegate *unmanaged[Cdecl]<double, void>)Library.Import("glfwSetTime");
        glfwGetTimerValue = (delegate *unmanaged[Cdecl]<ulong>)Library.Import("glfwGetTimerValue");
        glfwGetTimerFrequency = (delegate *unmanaged[Cdecl]<ulong>)Library.Import("glfwGetTimerFrequency");
        glfwMakeContextCurrent = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwMakeContextCurrent");
        glfwGetCurrentContext = (delegate *unmanaged[Cdecl]<Window>)Library.Import("glfwGetCurrentContext");
        glfwSwapBuffers = (delegate *unmanaged[Cdecl]<Window, void>)Library.Import("glfwSwapBuffers");
        glfwSwapInterval = (delegate *unmanaged[Cdecl]<int, void>)Library.Import("glfwSwapInterval");
        glfwExtensionSupported = (delegate *unmanaged[Cdecl]<byte*, int>)Library.Import("glfwExtensionSupported");
        glfwGetProcAddress = (delegate *unmanaged[Cdecl]<byte*, IntPtr>)Library.Import("glfwGetProcAddress");
        
        glfwVulkanSupported = (delegate *unmanaged[Cdecl]<int>) Library.Import("glfwVulkanSupported");
        glfwGetRequiredInstanceExtensions = (delegate *unmanaged[Cdecl]<uint*, IntPtr*>) Library.Import("glfwGetRequiredInstanceExtensions");
        glfwGetInstanceProcAddress = (delegate *unmanaged[Cdecl]<Instance, byte*, IntPtr>) Library.Import("glfwGetInstanceProcAddress");
        glfwGetPhysicalDevicePresentationSupport = (delegate *unmanaged[Cdecl]<Instance, PhysicalDevice, uint, int>) Library.Import("glfwGetPhysicalDevicePresentationSupport");
        glfwCreateWindowSurface = (delegate *unmanaged[Cdecl]<Instance,Window,IntPtr*,SurfaceKHR*,Result>) Library.Import("glfwCreateWindowSurface");
        glfwGetWGLContext = (delegate *unmanaged[Cdecl]<Window, IntPtr>)Library.Import("glfwGetWGLContext", false);
        glfwGetGLXContext = (delegate *unmanaged[Cdecl]<Window, IntPtr>)Library.Import("glfwGetGLXContext", false);
        glfwGetEGLContext = (delegate *unmanaged[Cdecl]<Window, IntPtr>)Library.Import("glfwGetEGLContext", false);
        glfwGetNSGLContext = (delegate *unmanaged[Cdecl]<Window, int>)Library.Import("glfwGetNSGLContext", false);
            
        // ReSharper restore StringLiteralTypo

        // Store a reference, as the garbage collector is not aware the delegate is still being referenced natively.
        onError = OnError;
        monitorCallback = OnMonitorConnection;
        joystickCallback = OnJoystickConnection;
        onFileDrop = OnFileDrop;
        onWindowClose = OnWindowClose;
        
        glfwSetErrorCallback(onError);
        glfwSetMonitorCallback(monitorCallback);
        glfwSetJoystickCallback(joystickCallback);
        windowCallbacksMap = new Dictionary<Window, WindowCallbacks>();
    }
    
        [StructLayout(LayoutKind.Sequential)]
        private struct GammaRamp
        {
            public ushort* R;
            public ushort* G;
            public ushort* B;
            public int Size;
        }
}